// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `base.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct MessPacketPt {
    // message fields
    pub user_id: u32,
    pub cmd: u32,
    pub is_broad: bool,
    pub is_client: bool,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessPacketPt {
    fn default() -> &'a MessPacketPt {
        <MessPacketPt as ::protobuf::Message>::default_instance()
    }
}

impl MessPacketPt {
    pub fn new() -> MessPacketPt {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 cmd = 2;


    pub fn get_cmd(&self) -> u32 {
        self.cmd
    }
    pub fn clear_cmd(&mut self) {
        self.cmd = 0;
    }

    // Param is passed by value, moved
    pub fn set_cmd(&mut self, v: u32) {
        self.cmd = v;
    }

    // bool is_broad = 3;


    pub fn get_is_broad(&self) -> bool {
        self.is_broad
    }
    pub fn clear_is_broad(&mut self) {
        self.is_broad = false;
    }

    // Param is passed by value, moved
    pub fn set_is_broad(&mut self, v: bool) {
        self.is_broad = v;
    }

    // bool is_client = 4;


    pub fn get_is_client(&self) -> bool {
        self.is_client
    }
    pub fn clear_is_client(&mut self) {
        self.is_client = false;
    }

    // Param is passed by value, moved
    pub fn set_is_client(&mut self, v: bool) {
        self.is_client = v;
    }

    // bytes data = 5;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MessPacketPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cmd = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_broad = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_client = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cmd != 0 {
            my_size += ::protobuf::rt::value_size(2, self.cmd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_broad != false {
            my_size += 2;
        }
        if self.is_client != false {
            my_size += 2;
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if self.cmd != 0 {
            os.write_uint32(2, self.cmd)?;
        }
        if self.is_broad != false {
            os.write_bool(3, self.is_broad)?;
        }
        if self.is_client != false {
            os.write_bool(4, self.is_client)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(5, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessPacketPt {
        MessPacketPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &MessPacketPt| { &m.user_id },
                    |m: &mut MessPacketPt| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cmd",
                    |m: &MessPacketPt| { &m.cmd },
                    |m: &mut MessPacketPt| { &mut m.cmd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_broad",
                    |m: &MessPacketPt| { &m.is_broad },
                    |m: &mut MessPacketPt| { &mut m.is_broad },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_client",
                    |m: &MessPacketPt| { &m.is_client },
                    |m: &mut MessPacketPt| { &mut m.is_client },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &MessPacketPt| { &m.data },
                    |m: &mut MessPacketPt| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessPacketPt>(
                    "MessPacketPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MessPacketPt {
        static mut instance: ::protobuf::lazy::Lazy<MessPacketPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(MessPacketPt::new)
        }
    }
}

impl ::protobuf::Clear for MessPacketPt {
    fn clear(&mut self) {
        self.user_id = 0;
        self.cmd = 0;
        self.is_broad = false;
        self.is_client = false;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessPacketPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessPacketPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerPt {
    // message fields
    pub maxScore: u32,
    pub maxJumpRange: u32,
    pub maxMultiple: u32,
    pub maxJumpLevel: u32,
    pub maxcp: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerPt {
    fn default() -> &'a PlayerPt {
        <PlayerPt as ::protobuf::Message>::default_instance()
    }
}

impl PlayerPt {
    pub fn new() -> PlayerPt {
        ::std::default::Default::default()
    }

    // uint32 maxScore = 1;


    pub fn get_maxScore(&self) -> u32 {
        self.maxScore
    }
    pub fn clear_maxScore(&mut self) {
        self.maxScore = 0;
    }

    // Param is passed by value, moved
    pub fn set_maxScore(&mut self, v: u32) {
        self.maxScore = v;
    }

    // uint32 maxJumpRange = 2;


    pub fn get_maxJumpRange(&self) -> u32 {
        self.maxJumpRange
    }
    pub fn clear_maxJumpRange(&mut self) {
        self.maxJumpRange = 0;
    }

    // Param is passed by value, moved
    pub fn set_maxJumpRange(&mut self, v: u32) {
        self.maxJumpRange = v;
    }

    // uint32 maxMultiple = 3;


    pub fn get_maxMultiple(&self) -> u32 {
        self.maxMultiple
    }
    pub fn clear_maxMultiple(&mut self) {
        self.maxMultiple = 0;
    }

    // Param is passed by value, moved
    pub fn set_maxMultiple(&mut self, v: u32) {
        self.maxMultiple = v;
    }

    // uint32 maxJumpLevel = 4;


    pub fn get_maxJumpLevel(&self) -> u32 {
        self.maxJumpLevel
    }
    pub fn clear_maxJumpLevel(&mut self) {
        self.maxJumpLevel = 0;
    }

    // Param is passed by value, moved
    pub fn set_maxJumpLevel(&mut self, v: u32) {
        self.maxJumpLevel = v;
    }

    // uint32 maxcp = 5;


    pub fn get_maxcp(&self) -> u32 {
        self.maxcp
    }
    pub fn clear_maxcp(&mut self) {
        self.maxcp = 0;
    }

    // Param is passed by value, moved
    pub fn set_maxcp(&mut self, v: u32) {
        self.maxcp = v;
    }
}

impl ::protobuf::Message for PlayerPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.maxScore = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.maxJumpRange = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.maxMultiple = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.maxJumpLevel = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.maxcp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.maxScore != 0 {
            my_size += ::protobuf::rt::value_size(1, self.maxScore, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maxJumpRange != 0 {
            my_size += ::protobuf::rt::value_size(2, self.maxJumpRange, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maxMultiple != 0 {
            my_size += ::protobuf::rt::value_size(3, self.maxMultiple, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maxJumpLevel != 0 {
            my_size += ::protobuf::rt::value_size(4, self.maxJumpLevel, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maxcp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.maxcp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.maxScore != 0 {
            os.write_uint32(1, self.maxScore)?;
        }
        if self.maxJumpRange != 0 {
            os.write_uint32(2, self.maxJumpRange)?;
        }
        if self.maxMultiple != 0 {
            os.write_uint32(3, self.maxMultiple)?;
        }
        if self.maxJumpLevel != 0 {
            os.write_uint32(4, self.maxJumpLevel)?;
        }
        if self.maxcp != 0 {
            os.write_uint32(5, self.maxcp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerPt {
        PlayerPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "maxScore",
                    |m: &PlayerPt| { &m.maxScore },
                    |m: &mut PlayerPt| { &mut m.maxScore },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "maxJumpRange",
                    |m: &PlayerPt| { &m.maxJumpRange },
                    |m: &mut PlayerPt| { &mut m.maxJumpRange },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "maxMultiple",
                    |m: &PlayerPt| { &m.maxMultiple },
                    |m: &mut PlayerPt| { &mut m.maxMultiple },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "maxJumpLevel",
                    |m: &PlayerPt| { &m.maxJumpLevel },
                    |m: &mut PlayerPt| { &mut m.maxJumpLevel },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "maxcp",
                    |m: &PlayerPt| { &m.maxcp },
                    |m: &mut PlayerPt| { &mut m.maxcp },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerPt>(
                    "PlayerPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PlayerPt {
        static mut instance: ::protobuf::lazy::Lazy<PlayerPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PlayerPt::new)
        }
    }
}

impl ::protobuf::Clear for PlayerPt {
    fn clear(&mut self) {
        self.maxScore = 0;
        self.maxJumpRange = 0;
        self.maxMultiple = 0;
        self.maxJumpLevel = 0;
        self.maxcp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResourcesPt {
    // message fields
    pub field_type: u32,
    pub id: u32,
    pub num: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourcesPt {
    fn default() -> &'a ResourcesPt {
        <ResourcesPt as ::protobuf::Message>::default_instance()
    }
}

impl ResourcesPt {
    pub fn new() -> ResourcesPt {
        ::std::default::Default::default()
    }

    // uint32 type = 1;


    pub fn get_field_type(&self) -> u32 {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: u32) {
        self.field_type = v;
    }

    // uint32 id = 2;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // double num = 3;


    pub fn get_num(&self) -> f64 {
        self.num
    }
    pub fn clear_num(&mut self) {
        self.num = 0.;
    }

    // Param is passed by value, moved
    pub fn set_num(&mut self, v: f64) {
        self.num = v;
    }
}

impl ::protobuf::Message for ResourcesPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.num = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.field_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != 0 {
            os.write_uint32(1, self.field_type)?;
        }
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        if self.num != 0. {
            os.write_double(3, self.num)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourcesPt {
        ResourcesPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "type",
                    |m: &ResourcesPt| { &m.field_type },
                    |m: &mut ResourcesPt| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "id",
                    |m: &ResourcesPt| { &m.id },
                    |m: &mut ResourcesPt| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "num",
                    |m: &ResourcesPt| { &m.num },
                    |m: &mut ResourcesPt| { &mut m.num },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourcesPt>(
                    "ResourcesPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResourcesPt {
        static mut instance: ::protobuf::lazy::Lazy<ResourcesPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ResourcesPt::new)
        }
    }
}

impl ::protobuf::Clear for ResourcesPt {
    fn clear(&mut self) {
        self.field_type = 0;
        self.id = 0;
        self.num = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourcesPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourcesPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BuffPt {
    // message fields
    pub buffCategory: u32,
    pub buffStartTime: u32,
    pub buffEndTime: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BuffPt {
    fn default() -> &'a BuffPt {
        <BuffPt as ::protobuf::Message>::default_instance()
    }
}

impl BuffPt {
    pub fn new() -> BuffPt {
        ::std::default::Default::default()
    }

    // uint32 buffCategory = 1;


    pub fn get_buffCategory(&self) -> u32 {
        self.buffCategory
    }
    pub fn clear_buffCategory(&mut self) {
        self.buffCategory = 0;
    }

    // Param is passed by value, moved
    pub fn set_buffCategory(&mut self, v: u32) {
        self.buffCategory = v;
    }

    // uint32 buffStartTime = 2;


    pub fn get_buffStartTime(&self) -> u32 {
        self.buffStartTime
    }
    pub fn clear_buffStartTime(&mut self) {
        self.buffStartTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_buffStartTime(&mut self, v: u32) {
        self.buffStartTime = v;
    }

    // uint32 buffEndTime = 3;


    pub fn get_buffEndTime(&self) -> u32 {
        self.buffEndTime
    }
    pub fn clear_buffEndTime(&mut self) {
        self.buffEndTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_buffEndTime(&mut self, v: u32) {
        self.buffEndTime = v;
    }
}

impl ::protobuf::Message for BuffPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.buffCategory = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.buffStartTime = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.buffEndTime = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.buffCategory != 0 {
            my_size += ::protobuf::rt::value_size(1, self.buffCategory, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.buffStartTime != 0 {
            my_size += ::protobuf::rt::value_size(2, self.buffStartTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.buffEndTime != 0 {
            my_size += ::protobuf::rt::value_size(3, self.buffEndTime, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.buffCategory != 0 {
            os.write_uint32(1, self.buffCategory)?;
        }
        if self.buffStartTime != 0 {
            os.write_uint32(2, self.buffStartTime)?;
        }
        if self.buffEndTime != 0 {
            os.write_uint32(3, self.buffEndTime)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BuffPt {
        BuffPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "buffCategory",
                    |m: &BuffPt| { &m.buffCategory },
                    |m: &mut BuffPt| { &mut m.buffCategory },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "buffStartTime",
                    |m: &BuffPt| { &m.buffStartTime },
                    |m: &mut BuffPt| { &mut m.buffStartTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "buffEndTime",
                    |m: &BuffPt| { &m.buffEndTime },
                    |m: &mut BuffPt| { &mut m.buffEndTime },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<BuffPt>(
                    "BuffPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BuffPt {
        static mut instance: ::protobuf::lazy::Lazy<BuffPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(BuffPt::new)
        }
    }
}

impl ::protobuf::Clear for BuffPt {
    fn clear(&mut self) {
        self.buffCategory = 0;
        self.buffStartTime = 0;
        self.buffEndTime = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BuffPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BuffPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeatBallPt {
    // message fields
    pub index: u32,
    pub heatBallId: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeatBallPt {
    fn default() -> &'a HeatBallPt {
        <HeatBallPt as ::protobuf::Message>::default_instance()
    }
}

impl HeatBallPt {
    pub fn new() -> HeatBallPt {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // uint32 heatBallId = 2;


    pub fn get_heatBallId(&self) -> u32 {
        self.heatBallId
    }
    pub fn clear_heatBallId(&mut self) {
        self.heatBallId = 0;
    }

    // Param is passed by value, moved
    pub fn set_heatBallId(&mut self, v: u32) {
        self.heatBallId = v;
    }
}

impl ::protobuf::Message for HeatBallPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.heatBallId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.heatBallId != 0 {
            my_size += ::protobuf::rt::value_size(2, self.heatBallId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if self.heatBallId != 0 {
            os.write_uint32(2, self.heatBallId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeatBallPt {
        HeatBallPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &HeatBallPt| { &m.index },
                    |m: &mut HeatBallPt| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "heatBallId",
                    |m: &HeatBallPt| { &m.heatBallId },
                    |m: &mut HeatBallPt| { &mut m.heatBallId },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<HeatBallPt>(
                    "HeatBallPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HeatBallPt {
        static mut instance: ::protobuf::lazy::Lazy<HeatBallPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(HeatBallPt::new)
        }
    }
}

impl ::protobuf::Clear for HeatBallPt {
    fn clear(&mut self) {
        self.index = 0;
        self.heatBallId = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeatBallPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeatBallPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeatBallBuyTimesPt {
    // message fields
    pub heatBallId: u32,
    pub buyTimes: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeatBallBuyTimesPt {
    fn default() -> &'a HeatBallBuyTimesPt {
        <HeatBallBuyTimesPt as ::protobuf::Message>::default_instance()
    }
}

impl HeatBallBuyTimesPt {
    pub fn new() -> HeatBallBuyTimesPt {
        ::std::default::Default::default()
    }

    // uint32 heatBallId = 1;


    pub fn get_heatBallId(&self) -> u32 {
        self.heatBallId
    }
    pub fn clear_heatBallId(&mut self) {
        self.heatBallId = 0;
    }

    // Param is passed by value, moved
    pub fn set_heatBallId(&mut self, v: u32) {
        self.heatBallId = v;
    }

    // uint32 buyTimes = 2;


    pub fn get_buyTimes(&self) -> u32 {
        self.buyTimes
    }
    pub fn clear_buyTimes(&mut self) {
        self.buyTimes = 0;
    }

    // Param is passed by value, moved
    pub fn set_buyTimes(&mut self, v: u32) {
        self.buyTimes = v;
    }
}

impl ::protobuf::Message for HeatBallBuyTimesPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.heatBallId = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.buyTimes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.heatBallId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.heatBallId, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.buyTimes != 0 {
            my_size += ::protobuf::rt::value_size(2, self.buyTimes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.heatBallId != 0 {
            os.write_uint32(1, self.heatBallId)?;
        }
        if self.buyTimes != 0 {
            os.write_uint32(2, self.buyTimes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeatBallBuyTimesPt {
        HeatBallBuyTimesPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "heatBallId",
                    |m: &HeatBallBuyTimesPt| { &m.heatBallId },
                    |m: &mut HeatBallBuyTimesPt| { &mut m.heatBallId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "buyTimes",
                    |m: &HeatBallBuyTimesPt| { &m.buyTimes },
                    |m: &mut HeatBallBuyTimesPt| { &mut m.buyTimes },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<HeatBallBuyTimesPt>(
                    "HeatBallBuyTimesPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HeatBallBuyTimesPt {
        static mut instance: ::protobuf::lazy::Lazy<HeatBallBuyTimesPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(HeatBallBuyTimesPt::new)
        }
    }
}

impl ::protobuf::Clear for HeatBallBuyTimesPt {
    fn clear(&mut self) {
        self.heatBallId = 0;
        self.buyTimes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeatBallBuyTimesPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeatBallBuyTimesPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RankInfoPt {
    // message fields
    pub index: u32,
    pub avatar: ::std::string::String,
    pub nickName: ::std::string::String,
    pub score: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RankInfoPt {
    fn default() -> &'a RankInfoPt {
        <RankInfoPt as ::protobuf::Message>::default_instance()
    }
}

impl RankInfoPt {
    pub fn new() -> RankInfoPt {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // string avatar = 2;


    pub fn get_avatar(&self) -> &str {
        &self.avatar
    }
    pub fn clear_avatar(&mut self) {
        self.avatar.clear();
    }

    // Param is passed by value, moved
    pub fn set_avatar(&mut self, v: ::std::string::String) {
        self.avatar = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_avatar(&mut self) -> &mut ::std::string::String {
        &mut self.avatar
    }

    // Take field
    pub fn take_avatar(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.avatar, ::std::string::String::new())
    }

    // string nickName = 3;


    pub fn get_nickName(&self) -> &str {
        &self.nickName
    }
    pub fn clear_nickName(&mut self) {
        self.nickName.clear();
    }

    // Param is passed by value, moved
    pub fn set_nickName(&mut self, v: ::std::string::String) {
        self.nickName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nickName(&mut self) -> &mut ::std::string::String {
        &mut self.nickName
    }

    // Take field
    pub fn take_nickName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nickName, ::std::string::String::new())
    }

    // uint32 score = 4;


    pub fn get_score(&self) -> u32 {
        self.score
    }
    pub fn clear_score(&mut self) {
        self.score = 0;
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: u32) {
        self.score = v;
    }
}

impl ::protobuf::Message for RankInfoPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.avatar)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nickName)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.score = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.avatar.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.avatar);
        }
        if !self.nickName.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.nickName);
        }
        if self.score != 0 {
            my_size += ::protobuf::rt::value_size(4, self.score, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if !self.avatar.is_empty() {
            os.write_string(2, &self.avatar)?;
        }
        if !self.nickName.is_empty() {
            os.write_string(3, &self.nickName)?;
        }
        if self.score != 0 {
            os.write_uint32(4, self.score)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RankInfoPt {
        RankInfoPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &RankInfoPt| { &m.index },
                    |m: &mut RankInfoPt| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "avatar",
                    |m: &RankInfoPt| { &m.avatar },
                    |m: &mut RankInfoPt| { &mut m.avatar },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nickName",
                    |m: &RankInfoPt| { &m.nickName },
                    |m: &mut RankInfoPt| { &mut m.nickName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "score",
                    |m: &RankInfoPt| { &m.score },
                    |m: &mut RankInfoPt| { &mut m.score },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RankInfoPt>(
                    "RankInfoPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RankInfoPt {
        static mut instance: ::protobuf::lazy::Lazy<RankInfoPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RankInfoPt::new)
        }
    }
}

impl ::protobuf::Clear for RankInfoPt {
    fn clear(&mut self) {
        self.index = 0;
        self.avatar.clear();
        self.nickName.clear();
        self.score = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RankInfoPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RankInfoPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeatBallTuJiaonPt {
    // message fields
    pub heatBallId: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeatBallTuJiaonPt {
    fn default() -> &'a HeatBallTuJiaonPt {
        <HeatBallTuJiaonPt as ::protobuf::Message>::default_instance()
    }
}

impl HeatBallTuJiaonPt {
    pub fn new() -> HeatBallTuJiaonPt {
        ::std::default::Default::default()
    }

    // uint32 heatBallId = 1;


    pub fn get_heatBallId(&self) -> u32 {
        self.heatBallId
    }
    pub fn clear_heatBallId(&mut self) {
        self.heatBallId = 0;
    }

    // Param is passed by value, moved
    pub fn set_heatBallId(&mut self, v: u32) {
        self.heatBallId = v;
    }
}

impl ::protobuf::Message for HeatBallTuJiaonPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.heatBallId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.heatBallId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.heatBallId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.heatBallId != 0 {
            os.write_uint32(1, self.heatBallId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeatBallTuJiaonPt {
        HeatBallTuJiaonPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "heatBallId",
                    |m: &HeatBallTuJiaonPt| { &m.heatBallId },
                    |m: &mut HeatBallTuJiaonPt| { &mut m.heatBallId },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<HeatBallTuJiaonPt>(
                    "HeatBallTuJiaonPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HeatBallTuJiaonPt {
        static mut instance: ::protobuf::lazy::Lazy<HeatBallTuJiaonPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(HeatBallTuJiaonPt::new)
        }
    }
}

impl ::protobuf::Clear for HeatBallTuJiaonPt {
    fn clear(&mut self) {
        self.heatBallId = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeatBallTuJiaonPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeatBallTuJiaonPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TargetPt {
    // message fields
    pub team_id: u32,
    pub user_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TargetPt {
    fn default() -> &'a TargetPt {
        <TargetPt as ::protobuf::Message>::default_instance()
    }
}

impl TargetPt {
    pub fn new() -> TargetPt {
        ::std::default::Default::default()
    }

    // uint32 team_id = 1;


    pub fn get_team_id(&self) -> u32 {
        self.team_id
    }
    pub fn clear_team_id(&mut self) {
        self.team_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = v;
    }

    // uint32 user_id = 2;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }
}

impl ::protobuf::Message for TargetPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.team_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.team_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.team_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.team_id != 0 {
            os.write_uint32(1, self.team_id)?;
        }
        if self.user_id != 0 {
            os.write_uint32(2, self.user_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TargetPt {
        TargetPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "team_id",
                    |m: &TargetPt| { &m.team_id },
                    |m: &mut TargetPt| { &mut m.team_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &TargetPt| { &m.user_id },
                    |m: &mut TargetPt| { &mut m.user_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TargetPt>(
                    "TargetPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TargetPt {
        static mut instance: ::protobuf::lazy::Lazy<TargetPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TargetPt::new)
        }
    }
}

impl ::protobuf::Clear for TargetPt {
    fn clear(&mut self) {
        self.team_id = 0;
        self.user_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TargetPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TargetPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MemberPt {
    // message fields
    pub user_id: u32,
    pub nick_name: ::std::string::String,
    pub state: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MemberPt {
    fn default() -> &'a MemberPt {
        <MemberPt as ::protobuf::Message>::default_instance()
    }
}

impl MemberPt {
    pub fn new() -> MemberPt {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // string nick_name = 2;


    pub fn get_nick_name(&self) -> &str {
        &self.nick_name
    }
    pub fn clear_nick_name(&mut self) {
        self.nick_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_nick_name(&mut self, v: ::std::string::String) {
        self.nick_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nick_name(&mut self) -> &mut ::std::string::String {
        &mut self.nick_name
    }

    // Take field
    pub fn take_nick_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nick_name, ::std::string::String::new())
    }

    // uint32 state = 3;


    pub fn get_state(&self) -> u32 {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = 0;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: u32) {
        self.state = v;
    }
}

impl ::protobuf::Message for MemberPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nick_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.state = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.nick_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nick_name);
        }
        if self.state != 0 {
            my_size += ::protobuf::rt::value_size(3, self.state, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if !self.nick_name.is_empty() {
            os.write_string(2, &self.nick_name)?;
        }
        if self.state != 0 {
            os.write_uint32(3, self.state)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MemberPt {
        MemberPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &MemberPt| { &m.user_id },
                    |m: &mut MemberPt| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nick_name",
                    |m: &MemberPt| { &m.nick_name },
                    |m: &mut MemberPt| { &mut m.nick_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "state",
                    |m: &MemberPt| { &m.state },
                    |m: &mut MemberPt| { &mut m.state },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<MemberPt>(
                    "MemberPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MemberPt {
        static mut instance: ::protobuf::lazy::Lazy<MemberPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(MemberPt::new)
        }
    }
}

impl ::protobuf::Clear for MemberPt {
    fn clear(&mut self) {
        self.user_id = 0;
        self.nick_name.clear();
        self.state = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MemberPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MemberPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TeamPt {
    // message fields
    pub team_id: u32,
    pub members: ::protobuf::RepeatedField<MemberPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TeamPt {
    fn default() -> &'a TeamPt {
        <TeamPt as ::protobuf::Message>::default_instance()
    }
}

impl TeamPt {
    pub fn new() -> TeamPt {
        ::std::default::Default::default()
    }

    // uint32 team_id = 1;


    pub fn get_team_id(&self) -> u32 {
        self.team_id
    }
    pub fn clear_team_id(&mut self) {
        self.team_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = v;
    }

    // repeated .protos.MemberPt members = 2;


    pub fn get_members(&self) -> &[MemberPt] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<MemberPt>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<MemberPt> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<MemberPt> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TeamPt {
    fn is_initialized(&self) -> bool {
        for v in &self.members {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.team_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.members)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.team_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.team_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.team_id != 0 {
            os.write_uint32(1, self.team_id)?;
        }
        for v in &self.members {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TeamPt {
        TeamPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "team_id",
                    |m: &TeamPt| { &m.team_id },
                    |m: &mut TeamPt| { &mut m.team_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MemberPt>>(
                    "members",
                    |m: &TeamPt| { &m.members },
                    |m: &mut TeamPt| { &mut m.members },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TeamPt>(
                    "TeamPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TeamPt {
        static mut instance: ::protobuf::lazy::Lazy<TeamPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TeamPt::new)
        }
    }
}

impl ::protobuf::Clear for TeamPt {
    fn clear(&mut self) {
        self.team_id = 0;
        self.members.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TeamPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TeamPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoomPt {
    // message fields
    pub room_id: u64,
    pub owner_id: u32,
    pub map_id: u32,
    pub permission: u32,
    pub teams: ::protobuf::RepeatedField<TeamPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RoomPt {
    fn default() -> &'a RoomPt {
        <RoomPt as ::protobuf::Message>::default_instance()
    }
}

impl RoomPt {
    pub fn new() -> RoomPt {
        ::std::default::Default::default()
    }

    // uint64 room_id = 1;


    pub fn get_room_id(&self) -> u64 {
        self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: u64) {
        self.room_id = v;
    }

    // uint32 owner_id = 2;


    pub fn get_owner_id(&self) -> u32 {
        self.owner_id
    }
    pub fn clear_owner_id(&mut self) {
        self.owner_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_owner_id(&mut self, v: u32) {
        self.owner_id = v;
    }

    // uint32 map_id = 3;


    pub fn get_map_id(&self) -> u32 {
        self.map_id
    }
    pub fn clear_map_id(&mut self) {
        self.map_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_map_id(&mut self, v: u32) {
        self.map_id = v;
    }

    // uint32 permission = 4;


    pub fn get_permission(&self) -> u32 {
        self.permission
    }
    pub fn clear_permission(&mut self) {
        self.permission = 0;
    }

    // Param is passed by value, moved
    pub fn set_permission(&mut self, v: u32) {
        self.permission = v;
    }

    // repeated .protos.TeamPt teams = 5;


    pub fn get_teams(&self) -> &[TeamPt] {
        &self.teams
    }
    pub fn clear_teams(&mut self) {
        self.teams.clear();
    }

    // Param is passed by value, moved
    pub fn set_teams(&mut self, v: ::protobuf::RepeatedField<TeamPt>) {
        self.teams = v;
    }

    // Mutable pointer to the field.
    pub fn mut_teams(&mut self) -> &mut ::protobuf::RepeatedField<TeamPt> {
        &mut self.teams
    }

    // Take field
    pub fn take_teams(&mut self) -> ::protobuf::RepeatedField<TeamPt> {
        ::std::mem::replace(&mut self.teams, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RoomPt {
    fn is_initialized(&self) -> bool {
        for v in &self.teams {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.room_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.owner_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.map_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.permission = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.teams)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.owner_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.owner_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.map_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.map_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.permission != 0 {
            my_size += ::protobuf::rt::value_size(4, self.permission, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_id != 0 {
            os.write_uint64(1, self.room_id)?;
        }
        if self.owner_id != 0 {
            os.write_uint32(2, self.owner_id)?;
        }
        if self.map_id != 0 {
            os.write_uint32(3, self.map_id)?;
        }
        if self.permission != 0 {
            os.write_uint32(4, self.permission)?;
        }
        for v in &self.teams {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoomPt {
        RoomPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "room_id",
                    |m: &RoomPt| { &m.room_id },
                    |m: &mut RoomPt| { &mut m.room_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "owner_id",
                    |m: &RoomPt| { &m.owner_id },
                    |m: &mut RoomPt| { &mut m.owner_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "map_id",
                    |m: &RoomPt| { &m.map_id },
                    |m: &mut RoomPt| { &mut m.map_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "permission",
                    |m: &RoomPt| { &m.permission },
                    |m: &mut RoomPt| { &mut m.permission },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TeamPt>>(
                    "teams",
                    |m: &RoomPt| { &m.teams },
                    |m: &mut RoomPt| { &mut m.teams },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RoomPt>(
                    "RoomPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoomPt {
        static mut instance: ::protobuf::lazy::Lazy<RoomPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RoomPt::new)
        }
    }
}

impl ::protobuf::Clear for RoomPt {
    fn clear(&mut self) {
        self.room_id = 0;
        self.owner_id = 0;
        self.map_id = 0;
        self.permission = 0;
        self.teams.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoomPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoomPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nbase.proto\x12\x06protos\"\x85\x01\n\x0cMessPacketPt\x12\x17\n\x07us\
    er_id\x18\x01\x20\x01(\rR\x06userId\x12\x10\n\x03cmd\x18\x02\x20\x01(\rR\
    \x03cmd\x12\x19\n\x08is_broad\x18\x03\x20\x01(\x08R\x07isBroad\x12\x1b\n\
    \tis_client\x18\x04\x20\x01(\x08R\x08isClient\x12\x12\n\x04data\x18\x05\
    \x20\x01(\x0cR\x04data\"\xa6\x01\n\x08PlayerPt\x12\x1a\n\x08maxScore\x18\
    \x01\x20\x01(\rR\x08maxScore\x12\"\n\x0cmaxJumpRange\x18\x02\x20\x01(\rR\
    \x0cmaxJumpRange\x12\x20\n\x0bmaxMultiple\x18\x03\x20\x01(\rR\x0bmaxMult\
    iple\x12\"\n\x0cmaxJumpLevel\x18\x04\x20\x01(\rR\x0cmaxJumpLevel\x12\x14\
    \n\x05maxcp\x18\x05\x20\x01(\rR\x05maxcp\"C\n\x0bResourcesPt\x12\x12\n\
    \x04type\x18\x01\x20\x01(\rR\x04type\x12\x0e\n\x02id\x18\x02\x20\x01(\rR\
    \x02id\x12\x10\n\x03num\x18\x03\x20\x01(\x01R\x03num\"t\n\x06BuffPt\x12\
    \"\n\x0cbuffCategory\x18\x01\x20\x01(\rR\x0cbuffCategory\x12$\n\rbuffSta\
    rtTime\x18\x02\x20\x01(\rR\rbuffStartTime\x12\x20\n\x0bbuffEndTime\x18\
    \x03\x20\x01(\rR\x0bbuffEndTime\"B\n\nHeatBallPt\x12\x14\n\x05index\x18\
    \x01\x20\x01(\rR\x05index\x12\x1e\n\nheatBallId\x18\x02\x20\x01(\rR\nhea\
    tBallId\"P\n\x12HeatBallBuyTimesPt\x12\x1e\n\nheatBallId\x18\x01\x20\x01\
    (\rR\nheatBallId\x12\x1a\n\x08buyTimes\x18\x02\x20\x01(\rR\x08buyTimes\"\
    l\n\nRankInfoPt\x12\x14\n\x05index\x18\x01\x20\x01(\rR\x05index\x12\x16\
    \n\x06avatar\x18\x02\x20\x01(\tR\x06avatar\x12\x1a\n\x08nickName\x18\x03\
    \x20\x01(\tR\x08nickName\x12\x14\n\x05score\x18\x04\x20\x01(\rR\x05score\
    \"3\n\x11HeatBallTuJiaonPt\x12\x1e\n\nheatBallId\x18\x01\x20\x01(\rR\nhe\
    atBallId\"<\n\x08TargetPt\x12\x17\n\x07team_id\x18\x01\x20\x01(\rR\x06te\
    amId\x12\x17\n\x07user_id\x18\x02\x20\x01(\rR\x06userId\"V\n\x08MemberPt\
    \x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\x12\x1b\n\tnick_name\
    \x18\x02\x20\x01(\tR\x08nickName\x12\x14\n\x05state\x18\x03\x20\x01(\rR\
    \x05state\"M\n\x06TeamPt\x12\x17\n\x07team_id\x18\x01\x20\x01(\rR\x06tea\
    mId\x12*\n\x07members\x18\x02\x20\x03(\x0b2\x10.protos.MemberPtR\x07memb\
    ers\"\x99\x01\n\x06RoomPt\x12\x17\n\x07room_id\x18\x01\x20\x01(\x04R\x06\
    roomId\x12\x19\n\x08owner_id\x18\x02\x20\x01(\rR\x07ownerId\x12\x15\n\
    \x06map_id\x18\x03\x20\x01(\rR\x05mapId\x12\x1e\n\npermission\x18\x04\
    \x20\x01(\rR\npermission\x12$\n\x05teams\x18\x05\x20\x03(\x0b2\x0e.proto\
    s.TeamPtR\x05teamsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
