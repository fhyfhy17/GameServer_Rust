// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `room.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct C_CREATE_ROOM {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_CREATE_ROOM {
    fn default() -> &'a C_CREATE_ROOM {
        <C_CREATE_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl C_CREATE_ROOM {
    pub fn new() -> C_CREATE_ROOM {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for C_CREATE_ROOM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_CREATE_ROOM {
        C_CREATE_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_CREATE_ROOM>(
                    "C_CREATE_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_CREATE_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<C_CREATE_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_CREATE_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for C_CREATE_ROOM {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_CREATE_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_CREATE_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_INVITE_FRIEND {
    // message fields
    pub friends: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_INVITE_FRIEND {
    fn default() -> &'a C_INVITE_FRIEND {
        <C_INVITE_FRIEND as ::protobuf::Message>::default_instance()
    }
}

impl C_INVITE_FRIEND {
    pub fn new() -> C_INVITE_FRIEND {
        ::std::default::Default::default()
    }

    // repeated uint32 friends = 1;


    pub fn get_friends(&self) -> &[u32] {
        &self.friends
    }
    pub fn clear_friends(&mut self) {
        self.friends.clear();
    }

    // Param is passed by value, moved
    pub fn set_friends(&mut self, v: ::std::vec::Vec<u32>) {
        self.friends = v;
    }

    // Mutable pointer to the field.
    pub fn mut_friends(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.friends
    }

    // Take field
    pub fn take_friends(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.friends, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for C_INVITE_FRIEND {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.friends)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.friends {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.friends {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_INVITE_FRIEND {
        C_INVITE_FRIEND::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "friends",
                    |m: &C_INVITE_FRIEND| { &m.friends },
                    |m: &mut C_INVITE_FRIEND| { &mut m.friends },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_INVITE_FRIEND>(
                    "C_INVITE_FRIEND",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_INVITE_FRIEND {
        static mut instance: ::protobuf::lazy::Lazy<C_INVITE_FRIEND> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_INVITE_FRIEND::new)
        }
    }
}

impl ::protobuf::Clear for C_INVITE_FRIEND {
    fn clear(&mut self) {
        self.friends.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_INVITE_FRIEND {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_INVITE_FRIEND {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_LEAVE_ROOM {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_LEAVE_ROOM {
    fn default() -> &'a C_LEAVE_ROOM {
        <C_LEAVE_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl C_LEAVE_ROOM {
    pub fn new() -> C_LEAVE_ROOM {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for C_LEAVE_ROOM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_LEAVE_ROOM {
        C_LEAVE_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_LEAVE_ROOM>(
                    "C_LEAVE_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_LEAVE_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<C_LEAVE_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_LEAVE_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for C_LEAVE_ROOM {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_LEAVE_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_LEAVE_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_KICK_MEMBER {
    // message fields
    pub target_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_KICK_MEMBER {
    fn default() -> &'a C_KICK_MEMBER {
        <C_KICK_MEMBER as ::protobuf::Message>::default_instance()
    }
}

impl C_KICK_MEMBER {
    pub fn new() -> C_KICK_MEMBER {
        ::std::default::Default::default()
    }

    // uint32 target_id = 1;


    pub fn get_target_id(&self) -> u32 {
        self.target_id
    }
    pub fn clear_target_id(&mut self) {
        self.target_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_id(&mut self, v: u32) {
        self.target_id = v;
    }
}

impl ::protobuf::Message for C_KICK_MEMBER {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.target_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.target_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.target_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.target_id != 0 {
            os.write_uint32(1, self.target_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_KICK_MEMBER {
        C_KICK_MEMBER::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "target_id",
                    |m: &C_KICK_MEMBER| { &m.target_id },
                    |m: &mut C_KICK_MEMBER| { &mut m.target_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_KICK_MEMBER>(
                    "C_KICK_MEMBER",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_KICK_MEMBER {
        static mut instance: ::protobuf::lazy::Lazy<C_KICK_MEMBER> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_KICK_MEMBER::new)
        }
    }
}

impl ::protobuf::Clear for C_KICK_MEMBER {
    fn clear(&mut self) {
        self.target_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_KICK_MEMBER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_KICK_MEMBER {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_CHANGE_TEAM {
    // message fields
    pub target_team_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_CHANGE_TEAM {
    fn default() -> &'a C_CHANGE_TEAM {
        <C_CHANGE_TEAM as ::protobuf::Message>::default_instance()
    }
}

impl C_CHANGE_TEAM {
    pub fn new() -> C_CHANGE_TEAM {
        ::std::default::Default::default()
    }

    // uint32 target_team_id = 1;


    pub fn get_target_team_id(&self) -> u32 {
        self.target_team_id
    }
    pub fn clear_target_team_id(&mut self) {
        self.target_team_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_team_id(&mut self, v: u32) {
        self.target_team_id = v;
    }
}

impl ::protobuf::Message for C_CHANGE_TEAM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.target_team_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.target_team_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.target_team_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.target_team_id != 0 {
            os.write_uint32(1, self.target_team_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_CHANGE_TEAM {
        C_CHANGE_TEAM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "target_team_id",
                    |m: &C_CHANGE_TEAM| { &m.target_team_id },
                    |m: &mut C_CHANGE_TEAM| { &mut m.target_team_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_CHANGE_TEAM>(
                    "C_CHANGE_TEAM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_CHANGE_TEAM {
        static mut instance: ::protobuf::lazy::Lazy<C_CHANGE_TEAM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_CHANGE_TEAM::new)
        }
    }
}

impl ::protobuf::Clear for C_CHANGE_TEAM {
    fn clear(&mut self) {
        self.target_team_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_CHANGE_TEAM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_CHANGE_TEAM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_PREPARE_CANCEL {
    // message fields
    pub prepare: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_PREPARE_CANCEL {
    fn default() -> &'a C_PREPARE_CANCEL {
        <C_PREPARE_CANCEL as ::protobuf::Message>::default_instance()
    }
}

impl C_PREPARE_CANCEL {
    pub fn new() -> C_PREPARE_CANCEL {
        ::std::default::Default::default()
    }

    // bool prepare = 1;


    pub fn get_prepare(&self) -> bool {
        self.prepare
    }
    pub fn clear_prepare(&mut self) {
        self.prepare = false;
    }

    // Param is passed by value, moved
    pub fn set_prepare(&mut self, v: bool) {
        self.prepare = v;
    }
}

impl ::protobuf::Message for C_PREPARE_CANCEL {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.prepare = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.prepare != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.prepare != false {
            os.write_bool(1, self.prepare)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_PREPARE_CANCEL {
        C_PREPARE_CANCEL::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "prepare",
                    |m: &C_PREPARE_CANCEL| { &m.prepare },
                    |m: &mut C_PREPARE_CANCEL| { &mut m.prepare },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_PREPARE_CANCEL>(
                    "C_PREPARE_CANCEL",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_PREPARE_CANCEL {
        static mut instance: ::protobuf::lazy::Lazy<C_PREPARE_CANCEL> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_PREPARE_CANCEL::new)
        }
    }
}

impl ::protobuf::Clear for C_PREPARE_CANCEL {
    fn clear(&mut self) {
        self.prepare = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_PREPARE_CANCEL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_PREPARE_CANCEL {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_CHANGE_ROOM_SETTING {
    // message fields
    pub permission: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_CHANGE_ROOM_SETTING {
    fn default() -> &'a C_CHANGE_ROOM_SETTING {
        <C_CHANGE_ROOM_SETTING as ::protobuf::Message>::default_instance()
    }
}

impl C_CHANGE_ROOM_SETTING {
    pub fn new() -> C_CHANGE_ROOM_SETTING {
        ::std::default::Default::default()
    }

    // uint32 permission = 1;


    pub fn get_permission(&self) -> u32 {
        self.permission
    }
    pub fn clear_permission(&mut self) {
        self.permission = 0;
    }

    // Param is passed by value, moved
    pub fn set_permission(&mut self, v: u32) {
        self.permission = v;
    }
}

impl ::protobuf::Message for C_CHANGE_ROOM_SETTING {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.permission = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.permission != 0 {
            my_size += ::protobuf::rt::value_size(1, self.permission, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.permission != 0 {
            os.write_uint32(1, self.permission)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_CHANGE_ROOM_SETTING {
        C_CHANGE_ROOM_SETTING::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "permission",
                    |m: &C_CHANGE_ROOM_SETTING| { &m.permission },
                    |m: &mut C_CHANGE_ROOM_SETTING| { &mut m.permission },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_CHANGE_ROOM_SETTING>(
                    "C_CHANGE_ROOM_SETTING",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_CHANGE_ROOM_SETTING {
        static mut instance: ::protobuf::lazy::Lazy<C_CHANGE_ROOM_SETTING> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_CHANGE_ROOM_SETTING::new)
        }
    }
}

impl ::protobuf::Clear for C_CHANGE_ROOM_SETTING {
    fn clear(&mut self) {
        self.permission = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_CHANGE_ROOM_SETTING {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_CHANGE_ROOM_SETTING {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_SEARCH_ROOM {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_SEARCH_ROOM {
    fn default() -> &'a C_SEARCH_ROOM {
        <C_SEARCH_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl C_SEARCH_ROOM {
    pub fn new() -> C_SEARCH_ROOM {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for C_SEARCH_ROOM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_SEARCH_ROOM {
        C_SEARCH_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_SEARCH_ROOM>(
                    "C_SEARCH_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_SEARCH_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<C_SEARCH_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_SEARCH_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for C_SEARCH_ROOM {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_SEARCH_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_SEARCH_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_ROOM {
    // message fields
    pub isSucc: bool,
    pub errMess: ::std::string::String,
    pub room: ::protobuf::SingularPtrField<super::base::RoomPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_ROOM {
    fn default() -> &'a S_ROOM {
        <S_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl S_ROOM {
    pub fn new() -> S_ROOM {
        ::std::default::Default::default()
    }

    // bool isSucc = 1;


    pub fn get_isSucc(&self) -> bool {
        self.isSucc
    }
    pub fn clear_isSucc(&mut self) {
        self.isSucc = false;
    }

    // Param is passed by value, moved
    pub fn set_isSucc(&mut self, v: bool) {
        self.isSucc = v;
    }

    // string errMess = 2;


    pub fn get_errMess(&self) -> &str {
        &self.errMess
    }
    pub fn clear_errMess(&mut self) {
        self.errMess.clear();
    }

    // Param is passed by value, moved
    pub fn set_errMess(&mut self, v: ::std::string::String) {
        self.errMess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errMess(&mut self) -> &mut ::std::string::String {
        &mut self.errMess
    }

    // Take field
    pub fn take_errMess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.errMess, ::std::string::String::new())
    }

    // .protos.RoomPt room = 3;


    pub fn get_room(&self) -> &super::base::RoomPt {
        self.room.as_ref().unwrap_or_else(|| super::base::RoomPt::default_instance())
    }
    pub fn clear_room(&mut self) {
        self.room.clear();
    }

    pub fn has_room(&self) -> bool {
        self.room.is_some()
    }

    // Param is passed by value, moved
    pub fn set_room(&mut self, v: super::base::RoomPt) {
        self.room = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room(&mut self) -> &mut super::base::RoomPt {
        if self.room.is_none() {
            self.room.set_default();
        }
        self.room.as_mut().unwrap()
    }

    // Take field
    pub fn take_room(&mut self) -> super::base::RoomPt {
        self.room.take().unwrap_or_else(|| super::base::RoomPt::new())
    }
}

impl ::protobuf::Message for S_ROOM {
    fn is_initialized(&self) -> bool {
        for v in &self.room {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isSucc = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.errMess)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.room)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isSucc != false {
            my_size += 2;
        }
        if !self.errMess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.errMess);
        }
        if let Some(ref v) = self.room.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isSucc != false {
            os.write_bool(1, self.isSucc)?;
        }
        if !self.errMess.is_empty() {
            os.write_string(2, &self.errMess)?;
        }
        if let Some(ref v) = self.room.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_ROOM {
        S_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isSucc",
                    |m: &S_ROOM| { &m.isSucc },
                    |m: &mut S_ROOM| { &mut m.isSucc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "errMess",
                    |m: &S_ROOM| { &m.errMess },
                    |m: &mut S_ROOM| { &mut m.errMess },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RoomPt>>(
                    "room",
                    |m: &S_ROOM| { &m.room },
                    |m: &mut S_ROOM| { &mut m.room },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_ROOM>(
                    "S_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<S_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for S_ROOM {
    fn clear(&mut self) {
        self.isSucc = false;
        self.errMess.clear();
        self.room.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_START {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_START {
    fn default() -> &'a C_START {
        <C_START as ::protobuf::Message>::default_instance()
    }
}

impl C_START {
    pub fn new() -> C_START {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for C_START {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_START {
        C_START::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_START>(
                    "C_START",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_START {
        static mut instance: ::protobuf::lazy::Lazy<C_START> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_START::new)
        }
    }
}

impl ::protobuf::Clear for C_START {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_START {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_START {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_START {
    // message fields
    pub isSucc: bool,
    pub errMess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_START {
    fn default() -> &'a S_START {
        <S_START as ::protobuf::Message>::default_instance()
    }
}

impl S_START {
    pub fn new() -> S_START {
        ::std::default::Default::default()
    }

    // bool isSucc = 1;


    pub fn get_isSucc(&self) -> bool {
        self.isSucc
    }
    pub fn clear_isSucc(&mut self) {
        self.isSucc = false;
    }

    // Param is passed by value, moved
    pub fn set_isSucc(&mut self, v: bool) {
        self.isSucc = v;
    }

    // string errMess = 2;


    pub fn get_errMess(&self) -> &str {
        &self.errMess
    }
    pub fn clear_errMess(&mut self) {
        self.errMess.clear();
    }

    // Param is passed by value, moved
    pub fn set_errMess(&mut self, v: ::std::string::String) {
        self.errMess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errMess(&mut self) -> &mut ::std::string::String {
        &mut self.errMess
    }

    // Take field
    pub fn take_errMess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.errMess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_START {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isSucc = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.errMess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isSucc != false {
            my_size += 2;
        }
        if !self.errMess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.errMess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isSucc != false {
            os.write_bool(1, self.isSucc)?;
        }
        if !self.errMess.is_empty() {
            os.write_string(2, &self.errMess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_START {
        S_START::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isSucc",
                    |m: &S_START| { &m.isSucc },
                    |m: &mut S_START| { &mut m.isSucc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "errMess",
                    |m: &S_START| { &m.errMess },
                    |m: &mut S_START| { &mut m.errMess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_START>(
                    "S_START",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_START {
        static mut instance: ::protobuf::lazy::Lazy<S_START> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_START::new)
        }
    }
}

impl ::protobuf::Clear for S_START {
    fn clear(&mut self) {
        self.isSucc = false;
        self.errMess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_START {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_START {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nroom.proto\x12\x06protos\x1a\nbase.proto\"\x0f\n\rC_CREATE_ROOM\"+\n\
    \x0fC_INVITE_FRIEND\x12\x18\n\x07friends\x18\x01\x20\x03(\rR\x07friends\
    \"\x0e\n\x0cC_LEAVE_ROOM\",\n\rC_KICK_MEMBER\x12\x1b\n\ttarget_id\x18\
    \x01\x20\x01(\rR\x08targetId\"5\n\rC_CHANGE_TEAM\x12$\n\x0etarget_team_i\
    d\x18\x01\x20\x01(\rR\x0ctargetTeamId\",\n\x10C_PREPARE_CANCEL\x12\x18\n\
    \x07prepare\x18\x01\x20\x01(\x08R\x07prepare\"7\n\x15C_CHANGE_ROOM_SETTI\
    NG\x12\x1e\n\npermission\x18\x01\x20\x01(\rR\npermission\"\x0f\n\rC_SEAR\
    CH_ROOM\"^\n\x06S_ROOM\x12\x16\n\x06isSucc\x18\x01\x20\x01(\x08R\x06isSu\
    cc\x12\x18\n\x07errMess\x18\x02\x20\x01(\tR\x07errMess\x12\"\n\x04room\
    \x18\x03\x20\x01(\x0b2\x0e.protos.RoomPtR\x04room\"\t\n\x07C_START\";\n\
    \x07S_START\x12\x16\n\x06isSucc\x18\x01\x20\x01(\x08R\x06isSucc\x12\x18\
    \n\x07errMess\x18\x02\x20\x01(\tR\x07errMessb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
