// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `room.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct C_CREATE_ROOM {
    // message fields
    pub room_type: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_CREATE_ROOM {
    fn default() -> &'a C_CREATE_ROOM {
        <C_CREATE_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl C_CREATE_ROOM {
    pub fn new() -> C_CREATE_ROOM {
        ::std::default::Default::default()
    }

    // uint32 room_type = 1;


    pub fn get_room_type(&self) -> u32 {
        self.room_type
    }
    pub fn clear_room_type(&mut self) {
        self.room_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_type(&mut self, v: u32) {
        self.room_type = v;
    }
}

impl ::protobuf::Message for C_CREATE_ROOM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_type = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_type, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_type != 0 {
            os.write_uint32(1, self.room_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_CREATE_ROOM {
        C_CREATE_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "room_type",
                    |m: &C_CREATE_ROOM| { &m.room_type },
                    |m: &mut C_CREATE_ROOM| { &mut m.room_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_CREATE_ROOM>(
                    "C_CREATE_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_CREATE_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<C_CREATE_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_CREATE_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for C_CREATE_ROOM {
    fn clear(&mut self) {
        self.room_type = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_CREATE_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_CREATE_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_JOIN_ROOM {
    // message fields
    pub room_type: u32,
    pub room_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_JOIN_ROOM {
    fn default() -> &'a C_JOIN_ROOM {
        <C_JOIN_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl C_JOIN_ROOM {
    pub fn new() -> C_JOIN_ROOM {
        ::std::default::Default::default()
    }

    // uint32 room_type = 1;


    pub fn get_room_type(&self) -> u32 {
        self.room_type
    }
    pub fn clear_room_type(&mut self) {
        self.room_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_type(&mut self, v: u32) {
        self.room_type = v;
    }

    // uint32 room_id = 2;


    pub fn get_room_id(&self) -> u32 {
        self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: u32) {
        self.room_id = v;
    }
}

impl ::protobuf::Message for C_JOIN_ROOM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.room_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.room_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_type != 0 {
            os.write_uint32(1, self.room_type)?;
        }
        if self.room_id != 0 {
            os.write_uint32(2, self.room_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_JOIN_ROOM {
        C_JOIN_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "room_type",
                    |m: &C_JOIN_ROOM| { &m.room_type },
                    |m: &mut C_JOIN_ROOM| { &mut m.room_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "room_id",
                    |m: &C_JOIN_ROOM| { &m.room_id },
                    |m: &mut C_JOIN_ROOM| { &mut m.room_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_JOIN_ROOM>(
                    "C_JOIN_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_JOIN_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<C_JOIN_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_JOIN_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for C_JOIN_ROOM {
    fn clear(&mut self) {
        self.room_type = 0;
        self.room_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_JOIN_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_JOIN_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_SEARCH_ROOM {
    // message fields
    pub battle_type: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_SEARCH_ROOM {
    fn default() -> &'a C_SEARCH_ROOM {
        <C_SEARCH_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl C_SEARCH_ROOM {
    pub fn new() -> C_SEARCH_ROOM {
        ::std::default::Default::default()
    }

    // uint32 battle_type = 1;


    pub fn get_battle_type(&self) -> u32 {
        self.battle_type
    }
    pub fn clear_battle_type(&mut self) {
        self.battle_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_battle_type(&mut self, v: u32) {
        self.battle_type = v;
    }
}

impl ::protobuf::Message for C_SEARCH_ROOM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.battle_type = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.battle_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.battle_type, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.battle_type != 0 {
            os.write_uint32(1, self.battle_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_SEARCH_ROOM {
        C_SEARCH_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "battle_type",
                    |m: &C_SEARCH_ROOM| { &m.battle_type },
                    |m: &mut C_SEARCH_ROOM| { &mut m.battle_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_SEARCH_ROOM>(
                    "C_SEARCH_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_SEARCH_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<C_SEARCH_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_SEARCH_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for C_SEARCH_ROOM {
    fn clear(&mut self) {
        self.battle_type = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_SEARCH_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_SEARCH_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_ROOM {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    pub room: ::protobuf::SingularPtrField<super::base::RoomPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_ROOM {
    fn default() -> &'a S_ROOM {
        <S_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl S_ROOM {
    pub fn new() -> S_ROOM {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }

    // .protos.RoomPt room = 3;


    pub fn get_room(&self) -> &super::base::RoomPt {
        self.room.as_ref().unwrap_or_else(|| super::base::RoomPt::default_instance())
    }
    pub fn clear_room(&mut self) {
        self.room.clear();
    }

    pub fn has_room(&self) -> bool {
        self.room.is_some()
    }

    // Param is passed by value, moved
    pub fn set_room(&mut self, v: super::base::RoomPt) {
        self.room = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room(&mut self) -> &mut super::base::RoomPt {
        if self.room.is_none() {
            self.room.set_default();
        }
        self.room.as_mut().unwrap()
    }

    // Take field
    pub fn take_room(&mut self) -> super::base::RoomPt {
        self.room.take().unwrap_or_else(|| super::base::RoomPt::new())
    }
}

impl ::protobuf::Message for S_ROOM {
    fn is_initialized(&self) -> bool {
        for v in &self.room {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.room)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        if let Some(ref v) = self.room.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        if let Some(ref v) = self.room.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_ROOM {
        S_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_ROOM| { &m.is_succ },
                    |m: &mut S_ROOM| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_ROOM| { &m.err_mess },
                    |m: &mut S_ROOM| { &mut m.err_mess },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RoomPt>>(
                    "room",
                    |m: &S_ROOM| { &m.room },
                    |m: &mut S_ROOM| { &mut m.room },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_ROOM>(
                    "S_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<S_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for S_ROOM {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.room.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_ROOM_SETTING {
    // message fields
    pub setting: ::protobuf::SingularPtrField<super::base::RoomSettingPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_ROOM_SETTING {
    fn default() -> &'a C_ROOM_SETTING {
        <C_ROOM_SETTING as ::protobuf::Message>::default_instance()
    }
}

impl C_ROOM_SETTING {
    pub fn new() -> C_ROOM_SETTING {
        ::std::default::Default::default()
    }

    // .protos.RoomSettingPt setting = 1;


    pub fn get_setting(&self) -> &super::base::RoomSettingPt {
        self.setting.as_ref().unwrap_or_else(|| super::base::RoomSettingPt::default_instance())
    }
    pub fn clear_setting(&mut self) {
        self.setting.clear();
    }

    pub fn has_setting(&self) -> bool {
        self.setting.is_some()
    }

    // Param is passed by value, moved
    pub fn set_setting(&mut self, v: super::base::RoomSettingPt) {
        self.setting = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_setting(&mut self) -> &mut super::base::RoomSettingPt {
        if self.setting.is_none() {
            self.setting.set_default();
        }
        self.setting.as_mut().unwrap()
    }

    // Take field
    pub fn take_setting(&mut self) -> super::base::RoomSettingPt {
        self.setting.take().unwrap_or_else(|| super::base::RoomSettingPt::new())
    }
}

impl ::protobuf::Message for C_ROOM_SETTING {
    fn is_initialized(&self) -> bool {
        for v in &self.setting {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.setting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.setting.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.setting.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_ROOM_SETTING {
        C_ROOM_SETTING::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RoomSettingPt>>(
                    "setting",
                    |m: &C_ROOM_SETTING| { &m.setting },
                    |m: &mut C_ROOM_SETTING| { &mut m.setting },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_ROOM_SETTING>(
                    "C_ROOM_SETTING",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_ROOM_SETTING {
        static mut instance: ::protobuf::lazy::Lazy<C_ROOM_SETTING> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_ROOM_SETTING::new)
        }
    }
}

impl ::protobuf::Clear for C_ROOM_SETTING {
    fn clear(&mut self) {
        self.setting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_ROOM_SETTING {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_ROOM_SETTING {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_ROOM_SETTING {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_ROOM_SETTING {
    fn default() -> &'a S_ROOM_SETTING {
        <S_ROOM_SETTING as ::protobuf::Message>::default_instance()
    }
}

impl S_ROOM_SETTING {
    pub fn new() -> S_ROOM_SETTING {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_ROOM_SETTING {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_ROOM_SETTING {
        S_ROOM_SETTING::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_ROOM_SETTING| { &m.is_succ },
                    |m: &mut S_ROOM_SETTING| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_ROOM_SETTING| { &m.err_mess },
                    |m: &mut S_ROOM_SETTING| { &mut m.err_mess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_ROOM_SETTING>(
                    "S_ROOM_SETTING",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_ROOM_SETTING {
        static mut instance: ::protobuf::lazy::Lazy<S_ROOM_SETTING> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_ROOM_SETTING::new)
        }
    }
}

impl ::protobuf::Clear for S_ROOM_SETTING {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_ROOM_SETTING {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_ROOM_SETTING {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_LEAVE_ROOM {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_LEAVE_ROOM {
    fn default() -> &'a C_LEAVE_ROOM {
        <C_LEAVE_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl C_LEAVE_ROOM {
    pub fn new() -> C_LEAVE_ROOM {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for C_LEAVE_ROOM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_LEAVE_ROOM {
        C_LEAVE_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_LEAVE_ROOM>(
                    "C_LEAVE_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_LEAVE_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<C_LEAVE_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_LEAVE_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for C_LEAVE_ROOM {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_LEAVE_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_LEAVE_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_LEAVE_ROOM {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_LEAVE_ROOM {
    fn default() -> &'a S_LEAVE_ROOM {
        <S_LEAVE_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl S_LEAVE_ROOM {
    pub fn new() -> S_LEAVE_ROOM {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_LEAVE_ROOM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_LEAVE_ROOM {
        S_LEAVE_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_LEAVE_ROOM| { &m.is_succ },
                    |m: &mut S_LEAVE_ROOM| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_LEAVE_ROOM| { &m.err_mess },
                    |m: &mut S_LEAVE_ROOM| { &mut m.err_mess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_LEAVE_ROOM>(
                    "S_LEAVE_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_LEAVE_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<S_LEAVE_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_LEAVE_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for S_LEAVE_ROOM {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_LEAVE_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_LEAVE_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_CHOICE_CHARACTER {
    // message fields
    pub cter: ::protobuf::SingularPtrField<super::base::CharacterPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_CHOICE_CHARACTER {
    fn default() -> &'a C_CHOICE_CHARACTER {
        <C_CHOICE_CHARACTER as ::protobuf::Message>::default_instance()
    }
}

impl C_CHOICE_CHARACTER {
    pub fn new() -> C_CHOICE_CHARACTER {
        ::std::default::Default::default()
    }

    // .protos.CharacterPt cter = 1;


    pub fn get_cter(&self) -> &super::base::CharacterPt {
        self.cter.as_ref().unwrap_or_else(|| super::base::CharacterPt::default_instance())
    }
    pub fn clear_cter(&mut self) {
        self.cter.clear();
    }

    pub fn has_cter(&self) -> bool {
        self.cter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cter(&mut self, v: super::base::CharacterPt) {
        self.cter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cter(&mut self) -> &mut super::base::CharacterPt {
        if self.cter.is_none() {
            self.cter.set_default();
        }
        self.cter.as_mut().unwrap()
    }

    // Take field
    pub fn take_cter(&mut self) -> super::base::CharacterPt {
        self.cter.take().unwrap_or_else(|| super::base::CharacterPt::new())
    }
}

impl ::protobuf::Message for C_CHOICE_CHARACTER {
    fn is_initialized(&self) -> bool {
        for v in &self.cter {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cter.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_CHOICE_CHARACTER {
        C_CHOICE_CHARACTER::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::CharacterPt>>(
                    "cter",
                    |m: &C_CHOICE_CHARACTER| { &m.cter },
                    |m: &mut C_CHOICE_CHARACTER| { &mut m.cter },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_CHOICE_CHARACTER>(
                    "C_CHOICE_CHARACTER",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_CHOICE_CHARACTER {
        static mut instance: ::protobuf::lazy::Lazy<C_CHOICE_CHARACTER> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_CHOICE_CHARACTER::new)
        }
    }
}

impl ::protobuf::Clear for C_CHOICE_CHARACTER {
    fn clear(&mut self) {
        self.cter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_CHOICE_CHARACTER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_CHOICE_CHARACTER {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_CHOICE_CHARACTER {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_CHOICE_CHARACTER {
    fn default() -> &'a S_CHOICE_CHARACTER {
        <S_CHOICE_CHARACTER as ::protobuf::Message>::default_instance()
    }
}

impl S_CHOICE_CHARACTER {
    pub fn new() -> S_CHOICE_CHARACTER {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_CHOICE_CHARACTER {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_CHOICE_CHARACTER {
        S_CHOICE_CHARACTER::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_CHOICE_CHARACTER| { &m.is_succ },
                    |m: &mut S_CHOICE_CHARACTER| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_CHOICE_CHARACTER| { &m.err_mess },
                    |m: &mut S_CHOICE_CHARACTER| { &mut m.err_mess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_CHOICE_CHARACTER>(
                    "S_CHOICE_CHARACTER",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_CHOICE_CHARACTER {
        static mut instance: ::protobuf::lazy::Lazy<S_CHOICE_CHARACTER> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_CHOICE_CHARACTER::new)
        }
    }
}

impl ::protobuf::Clear for S_CHOICE_CHARACTER {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_CHOICE_CHARACTER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_CHOICE_CHARACTER {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_KICK_MEMBER {
    // message fields
    pub target_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_KICK_MEMBER {
    fn default() -> &'a C_KICK_MEMBER {
        <C_KICK_MEMBER as ::protobuf::Message>::default_instance()
    }
}

impl C_KICK_MEMBER {
    pub fn new() -> C_KICK_MEMBER {
        ::std::default::Default::default()
    }

    // uint32 target_id = 1;


    pub fn get_target_id(&self) -> u32 {
        self.target_id
    }
    pub fn clear_target_id(&mut self) {
        self.target_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_id(&mut self, v: u32) {
        self.target_id = v;
    }
}

impl ::protobuf::Message for C_KICK_MEMBER {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.target_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.target_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.target_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.target_id != 0 {
            os.write_uint32(1, self.target_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_KICK_MEMBER {
        C_KICK_MEMBER::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "target_id",
                    |m: &C_KICK_MEMBER| { &m.target_id },
                    |m: &mut C_KICK_MEMBER| { &mut m.target_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_KICK_MEMBER>(
                    "C_KICK_MEMBER",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_KICK_MEMBER {
        static mut instance: ::protobuf::lazy::Lazy<C_KICK_MEMBER> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_KICK_MEMBER::new)
        }
    }
}

impl ::protobuf::Clear for C_KICK_MEMBER {
    fn clear(&mut self) {
        self.target_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_KICK_MEMBER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_KICK_MEMBER {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_KICK_MEMBER {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_KICK_MEMBER {
    fn default() -> &'a S_KICK_MEMBER {
        <S_KICK_MEMBER as ::protobuf::Message>::default_instance()
    }
}

impl S_KICK_MEMBER {
    pub fn new() -> S_KICK_MEMBER {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_KICK_MEMBER {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_KICK_MEMBER {
        S_KICK_MEMBER::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_KICK_MEMBER| { &m.is_succ },
                    |m: &mut S_KICK_MEMBER| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_KICK_MEMBER| { &m.err_mess },
                    |m: &mut S_KICK_MEMBER| { &mut m.err_mess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_KICK_MEMBER>(
                    "S_KICK_MEMBER",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_KICK_MEMBER {
        static mut instance: ::protobuf::lazy::Lazy<S_KICK_MEMBER> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_KICK_MEMBER::new)
        }
    }
}

impl ::protobuf::Clear for S_KICK_MEMBER {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_KICK_MEMBER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_KICK_MEMBER {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_CHANGE_TEAM {
    // message fields
    pub target_team_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_CHANGE_TEAM {
    fn default() -> &'a C_CHANGE_TEAM {
        <C_CHANGE_TEAM as ::protobuf::Message>::default_instance()
    }
}

impl C_CHANGE_TEAM {
    pub fn new() -> C_CHANGE_TEAM {
        ::std::default::Default::default()
    }

    // uint32 target_team_id = 1;


    pub fn get_target_team_id(&self) -> u32 {
        self.target_team_id
    }
    pub fn clear_target_team_id(&mut self) {
        self.target_team_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_team_id(&mut self, v: u32) {
        self.target_team_id = v;
    }
}

impl ::protobuf::Message for C_CHANGE_TEAM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.target_team_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.target_team_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.target_team_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.target_team_id != 0 {
            os.write_uint32(1, self.target_team_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_CHANGE_TEAM {
        C_CHANGE_TEAM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "target_team_id",
                    |m: &C_CHANGE_TEAM| { &m.target_team_id },
                    |m: &mut C_CHANGE_TEAM| { &mut m.target_team_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_CHANGE_TEAM>(
                    "C_CHANGE_TEAM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_CHANGE_TEAM {
        static mut instance: ::protobuf::lazy::Lazy<C_CHANGE_TEAM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_CHANGE_TEAM::new)
        }
    }
}

impl ::protobuf::Clear for C_CHANGE_TEAM {
    fn clear(&mut self) {
        self.target_team_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_CHANGE_TEAM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_CHANGE_TEAM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_CHANGE_TEAM {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_CHANGE_TEAM {
    fn default() -> &'a S_CHANGE_TEAM {
        <S_CHANGE_TEAM as ::protobuf::Message>::default_instance()
    }
}

impl S_CHANGE_TEAM {
    pub fn new() -> S_CHANGE_TEAM {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_CHANGE_TEAM {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_CHANGE_TEAM {
        S_CHANGE_TEAM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_CHANGE_TEAM| { &m.is_succ },
                    |m: &mut S_CHANGE_TEAM| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_CHANGE_TEAM| { &m.err_mess },
                    |m: &mut S_CHANGE_TEAM| { &mut m.err_mess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_CHANGE_TEAM>(
                    "S_CHANGE_TEAM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_CHANGE_TEAM {
        static mut instance: ::protobuf::lazy::Lazy<S_CHANGE_TEAM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_CHANGE_TEAM::new)
        }
    }
}

impl ::protobuf::Clear for S_CHANGE_TEAM {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_CHANGE_TEAM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_CHANGE_TEAM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_PREPARE_CANCEL {
    // message fields
    pub prepare: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_PREPARE_CANCEL {
    fn default() -> &'a C_PREPARE_CANCEL {
        <C_PREPARE_CANCEL as ::protobuf::Message>::default_instance()
    }
}

impl C_PREPARE_CANCEL {
    pub fn new() -> C_PREPARE_CANCEL {
        ::std::default::Default::default()
    }

    // bool prepare = 1;


    pub fn get_prepare(&self) -> bool {
        self.prepare
    }
    pub fn clear_prepare(&mut self) {
        self.prepare = false;
    }

    // Param is passed by value, moved
    pub fn set_prepare(&mut self, v: bool) {
        self.prepare = v;
    }
}

impl ::protobuf::Message for C_PREPARE_CANCEL {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.prepare = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.prepare != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.prepare != false {
            os.write_bool(1, self.prepare)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_PREPARE_CANCEL {
        C_PREPARE_CANCEL::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "prepare",
                    |m: &C_PREPARE_CANCEL| { &m.prepare },
                    |m: &mut C_PREPARE_CANCEL| { &mut m.prepare },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_PREPARE_CANCEL>(
                    "C_PREPARE_CANCEL",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_PREPARE_CANCEL {
        static mut instance: ::protobuf::lazy::Lazy<C_PREPARE_CANCEL> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_PREPARE_CANCEL::new)
        }
    }
}

impl ::protobuf::Clear for C_PREPARE_CANCEL {
    fn clear(&mut self) {
        self.prepare = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_PREPARE_CANCEL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_PREPARE_CANCEL {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_PREPARE_CANCEL {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    pub user_id: u32,
    pub prepare: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_PREPARE_CANCEL {
    fn default() -> &'a S_PREPARE_CANCEL {
        <S_PREPARE_CANCEL as ::protobuf::Message>::default_instance()
    }
}

impl S_PREPARE_CANCEL {
    pub fn new() -> S_PREPARE_CANCEL {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }

    // uint32 user_id = 3;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // bool prepare = 4;


    pub fn get_prepare(&self) -> bool {
        self.prepare
    }
    pub fn clear_prepare(&mut self) {
        self.prepare = false;
    }

    // Param is passed by value, moved
    pub fn set_prepare(&mut self, v: bool) {
        self.prepare = v;
    }
}

impl ::protobuf::Message for S_PREPARE_CANCEL {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.prepare = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prepare != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        if self.user_id != 0 {
            os.write_uint32(3, self.user_id)?;
        }
        if self.prepare != false {
            os.write_bool(4, self.prepare)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_PREPARE_CANCEL {
        S_PREPARE_CANCEL::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_PREPARE_CANCEL| { &m.is_succ },
                    |m: &mut S_PREPARE_CANCEL| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_PREPARE_CANCEL| { &m.err_mess },
                    |m: &mut S_PREPARE_CANCEL| { &mut m.err_mess },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &S_PREPARE_CANCEL| { &m.user_id },
                    |m: &mut S_PREPARE_CANCEL| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "prepare",
                    |m: &S_PREPARE_CANCEL| { &m.prepare },
                    |m: &mut S_PREPARE_CANCEL| { &mut m.prepare },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_PREPARE_CANCEL>(
                    "S_PREPARE_CANCEL",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_PREPARE_CANCEL {
        static mut instance: ::protobuf::lazy::Lazy<S_PREPARE_CANCEL> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_PREPARE_CANCEL::new)
        }
    }
}

impl ::protobuf::Clear for S_PREPARE_CANCEL {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.user_id = 0;
        self.prepare = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_PREPARE_CANCEL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_PREPARE_CANCEL {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_START {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_START {
    fn default() -> &'a C_START {
        <C_START as ::protobuf::Message>::default_instance()
    }
}

impl C_START {
    pub fn new() -> C_START {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for C_START {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_START {
        C_START::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_START>(
                    "C_START",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_START {
        static mut instance: ::protobuf::lazy::Lazy<C_START> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_START::new)
        }
    }
}

impl ::protobuf::Clear for C_START {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_START {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_START {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_START {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_START {
    fn default() -> &'a S_START {
        <S_START as ::protobuf::Message>::default_instance()
    }
}

impl S_START {
    pub fn new() -> S_START {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_START {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_START {
        S_START::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_START| { &m.is_succ },
                    |m: &mut S_START| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_START| { &m.err_mess },
                    |m: &mut S_START| { &mut m.err_mess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_START>(
                    "S_START",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_START {
        static mut instance: ::protobuf::lazy::Lazy<S_START> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_START::new)
        }
    }
}

impl ::protobuf::Clear for S_START {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_START {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_START {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_ROOM_MEMBER_NOTICE {
    // message fields
    pub notice_type: u32,
    pub member: ::protobuf::SingularPtrField<super::base::MemberPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_ROOM_MEMBER_NOTICE {
    fn default() -> &'a S_ROOM_MEMBER_NOTICE {
        <S_ROOM_MEMBER_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_ROOM_MEMBER_NOTICE {
    pub fn new() -> S_ROOM_MEMBER_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 notice_type = 1;


    pub fn get_notice_type(&self) -> u32 {
        self.notice_type
    }
    pub fn clear_notice_type(&mut self) {
        self.notice_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_notice_type(&mut self, v: u32) {
        self.notice_type = v;
    }

    // .protos.MemberPt member = 2;


    pub fn get_member(&self) -> &super::base::MemberPt {
        self.member.as_ref().unwrap_or_else(|| super::base::MemberPt::default_instance())
    }
    pub fn clear_member(&mut self) {
        self.member.clear();
    }

    pub fn has_member(&self) -> bool {
        self.member.is_some()
    }

    // Param is passed by value, moved
    pub fn set_member(&mut self, v: super::base::MemberPt) {
        self.member = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_member(&mut self) -> &mut super::base::MemberPt {
        if self.member.is_none() {
            self.member.set_default();
        }
        self.member.as_mut().unwrap()
    }

    // Take field
    pub fn take_member(&mut self) -> super::base::MemberPt {
        self.member.take().unwrap_or_else(|| super::base::MemberPt::new())
    }
}

impl ::protobuf::Message for S_ROOM_MEMBER_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.member {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.notice_type = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.member)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.notice_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.notice_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.member.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.notice_type != 0 {
            os.write_uint32(1, self.notice_type)?;
        }
        if let Some(ref v) = self.member.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_ROOM_MEMBER_NOTICE {
        S_ROOM_MEMBER_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "notice_type",
                    |m: &S_ROOM_MEMBER_NOTICE| { &m.notice_type },
                    |m: &mut S_ROOM_MEMBER_NOTICE| { &mut m.notice_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::MemberPt>>(
                    "member",
                    |m: &S_ROOM_MEMBER_NOTICE| { &m.member },
                    |m: &mut S_ROOM_MEMBER_NOTICE| { &mut m.member },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_ROOM_MEMBER_NOTICE>(
                    "S_ROOM_MEMBER_NOTICE",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_ROOM_MEMBER_NOTICE {
        static mut instance: ::protobuf::lazy::Lazy<S_ROOM_MEMBER_NOTICE> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_ROOM_MEMBER_NOTICE::new)
        }
    }
}

impl ::protobuf::Clear for S_ROOM_MEMBER_NOTICE {
    fn clear(&mut self) {
        self.notice_type = 0;
        self.member.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_ROOM_MEMBER_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_ROOM_MEMBER_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_ROOM_NOTICE {
    // message fields
    pub owner_id: u32,
    pub setting: ::protobuf::SingularPtrField<super::base::RoomSettingPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_ROOM_NOTICE {
    fn default() -> &'a S_ROOM_NOTICE {
        <S_ROOM_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_ROOM_NOTICE {
    pub fn new() -> S_ROOM_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 owner_id = 1;


    pub fn get_owner_id(&self) -> u32 {
        self.owner_id
    }
    pub fn clear_owner_id(&mut self) {
        self.owner_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_owner_id(&mut self, v: u32) {
        self.owner_id = v;
    }

    // .protos.RoomSettingPt setting = 2;


    pub fn get_setting(&self) -> &super::base::RoomSettingPt {
        self.setting.as_ref().unwrap_or_else(|| super::base::RoomSettingPt::default_instance())
    }
    pub fn clear_setting(&mut self) {
        self.setting.clear();
    }

    pub fn has_setting(&self) -> bool {
        self.setting.is_some()
    }

    // Param is passed by value, moved
    pub fn set_setting(&mut self, v: super::base::RoomSettingPt) {
        self.setting = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_setting(&mut self) -> &mut super::base::RoomSettingPt {
        if self.setting.is_none() {
            self.setting.set_default();
        }
        self.setting.as_mut().unwrap()
    }

    // Take field
    pub fn take_setting(&mut self) -> super::base::RoomSettingPt {
        self.setting.take().unwrap_or_else(|| super::base::RoomSettingPt::new())
    }
}

impl ::protobuf::Message for S_ROOM_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.setting {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.owner_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.setting)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.owner_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.owner_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.setting.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.owner_id != 0 {
            os.write_uint32(1, self.owner_id)?;
        }
        if let Some(ref v) = self.setting.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_ROOM_NOTICE {
        S_ROOM_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "owner_id",
                    |m: &S_ROOM_NOTICE| { &m.owner_id },
                    |m: &mut S_ROOM_NOTICE| { &mut m.owner_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RoomSettingPt>>(
                    "setting",
                    |m: &S_ROOM_NOTICE| { &m.setting },
                    |m: &mut S_ROOM_NOTICE| { &mut m.setting },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_ROOM_NOTICE>(
                    "S_ROOM_NOTICE",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_ROOM_NOTICE {
        static mut instance: ::protobuf::lazy::Lazy<S_ROOM_NOTICE> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_ROOM_NOTICE::new)
        }
    }
}

impl ::protobuf::Clear for S_ROOM_NOTICE {
    fn clear(&mut self) {
        self.owner_id = 0;
        self.setting.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_ROOM_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_ROOM_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_EMOJI {
    // message fields
    pub emoji_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_EMOJI {
    fn default() -> &'a C_EMOJI {
        <C_EMOJI as ::protobuf::Message>::default_instance()
    }
}

impl C_EMOJI {
    pub fn new() -> C_EMOJI {
        ::std::default::Default::default()
    }

    // uint32 emoji_id = 1;


    pub fn get_emoji_id(&self) -> u32 {
        self.emoji_id
    }
    pub fn clear_emoji_id(&mut self) {
        self.emoji_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_emoji_id(&mut self, v: u32) {
        self.emoji_id = v;
    }
}

impl ::protobuf::Message for C_EMOJI {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.emoji_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.emoji_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.emoji_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.emoji_id != 0 {
            os.write_uint32(1, self.emoji_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_EMOJI {
        C_EMOJI::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "emoji_id",
                    |m: &C_EMOJI| { &m.emoji_id },
                    |m: &mut C_EMOJI| { &mut m.emoji_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_EMOJI>(
                    "C_EMOJI",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_EMOJI {
        static mut instance: ::protobuf::lazy::Lazy<C_EMOJI> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_EMOJI::new)
        }
    }
}

impl ::protobuf::Clear for C_EMOJI {
    fn clear(&mut self) {
        self.emoji_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_EMOJI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_EMOJI {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_EMOJI {
    // message fields
    pub user_id: u32,
    pub emoji_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_EMOJI {
    fn default() -> &'a S_EMOJI {
        <S_EMOJI as ::protobuf::Message>::default_instance()
    }
}

impl S_EMOJI {
    pub fn new() -> S_EMOJI {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 emoji_id = 2;


    pub fn get_emoji_id(&self) -> u32 {
        self.emoji_id
    }
    pub fn clear_emoji_id(&mut self) {
        self.emoji_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_emoji_id(&mut self, v: u32) {
        self.emoji_id = v;
    }
}

impl ::protobuf::Message for S_EMOJI {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.emoji_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.emoji_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.emoji_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if self.emoji_id != 0 {
            os.write_uint32(2, self.emoji_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_EMOJI {
        S_EMOJI::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &S_EMOJI| { &m.user_id },
                    |m: &mut S_EMOJI| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "emoji_id",
                    |m: &S_EMOJI| { &m.emoji_id },
                    |m: &mut S_EMOJI| { &mut m.emoji_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_EMOJI>(
                    "S_EMOJI",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_EMOJI {
        static mut instance: ::protobuf::lazy::Lazy<S_EMOJI> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_EMOJI::new)
        }
    }
}

impl ::protobuf::Clear for S_EMOJI {
    fn clear(&mut self) {
        self.user_id = 0;
        self.emoji_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_EMOJI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_EMOJI {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nroom.proto\x12\x06protos\x1a\nbase.proto\",\n\rC_CREATE_ROOM\x12\x1b\
    \n\troom_type\x18\x01\x20\x01(\rR\x08roomType\"C\n\x0bC_JOIN_ROOM\x12\
    \x1b\n\troom_type\x18\x01\x20\x01(\rR\x08roomType\x12\x17\n\x07room_id\
    \x18\x02\x20\x01(\rR\x06roomId\"0\n\rC_SEARCH_ROOM\x12\x1f\n\x0bbattle_t\
    ype\x18\x01\x20\x01(\rR\nbattleType\"`\n\x06S_ROOM\x12\x17\n\x07is_succ\
    \x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_mess\x18\x02\x20\x01(\
    \tR\x07errMess\x12\"\n\x04room\x18\x03\x20\x01(\x0b2\x0e.protos.RoomPtR\
    \x04room\"A\n\x0eC_ROOM_SETTING\x12/\n\x07setting\x18\x01\x20\x01(\x0b2\
    \x15.protos.RoomSettingPtR\x07setting\"D\n\x0eS_ROOM_SETTING\x12\x17\n\
    \x07is_succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_mess\x18\
    \x02\x20\x01(\tR\x07errMess\"\x0e\n\x0cC_LEAVE_ROOM\"B\n\x0cS_LEAVE_ROOM\
    \x12\x17\n\x07is_succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_m\
    ess\x18\x02\x20\x01(\tR\x07errMess\"=\n\x12C_CHOICE_CHARACTER\x12'\n\x04\
    cter\x18\x01\x20\x01(\x0b2\x13.protos.CharacterPtR\x04cter\"H\n\x12S_CHO\
    ICE_CHARACTER\x12\x17\n\x07is_succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\
    \x19\n\x08err_mess\x18\x02\x20\x01(\tR\x07errMess\",\n\rC_KICK_MEMBER\
    \x12\x1b\n\ttarget_id\x18\x01\x20\x01(\rR\x08targetId\"C\n\rS_KICK_MEMBE\
    R\x12\x17\n\x07is_succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_\
    mess\x18\x02\x20\x01(\tR\x07errMess\"5\n\rC_CHANGE_TEAM\x12$\n\x0etarget\
    _team_id\x18\x01\x20\x01(\rR\x0ctargetTeamId\"C\n\rS_CHANGE_TEAM\x12\x17\
    \n\x07is_succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_mess\x18\
    \x02\x20\x01(\tR\x07errMess\",\n\x10C_PREPARE_CANCEL\x12\x18\n\x07prepar\
    e\x18\x01\x20\x01(\x08R\x07prepare\"y\n\x10S_PREPARE_CANCEL\x12\x17\n\
    \x07is_succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_mess\x18\
    \x02\x20\x01(\tR\x07errMess\x12\x17\n\x07user_id\x18\x03\x20\x01(\rR\x06\
    userId\x12\x18\n\x07prepare\x18\x04\x20\x01(\x08R\x07prepare\"\t\n\x07C_\
    START\"=\n\x07S_START\x12\x17\n\x07is_succ\x18\x01\x20\x01(\x08R\x06isSu\
    cc\x12\x19\n\x08err_mess\x18\x02\x20\x01(\tR\x07errMess\"a\n\x14S_ROOM_M\
    EMBER_NOTICE\x12\x1f\n\x0bnotice_type\x18\x01\x20\x01(\rR\nnoticeType\
    \x12(\n\x06member\x18\x02\x20\x01(\x0b2\x10.protos.MemberPtR\x06member\"\
    [\n\rS_ROOM_NOTICE\x12\x19\n\x08owner_id\x18\x01\x20\x01(\rR\x07ownerId\
    \x12/\n\x07setting\x18\x02\x20\x01(\x0b2\x15.protos.RoomSettingPtR\x07se\
    tting\"$\n\x07C_EMOJI\x12\x19\n\x08emoji_id\x18\x01\x20\x01(\rR\x07emoji\
    Id\"=\n\x07S_EMOJI\x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\
    \x12\x19\n\x08emoji_id\x18\x02\x20\x01(\rR\x07emojiIdb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
