// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `server_protocol.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct G_R_CREATE_ROOM {
    // message fields
    pub room_type: u32,
    pub pbp: ::protobuf::SingularPtrField<PlayerBattlePt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a G_R_CREATE_ROOM {
    fn default() -> &'a G_R_CREATE_ROOM {
        <G_R_CREATE_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl G_R_CREATE_ROOM {
    pub fn new() -> G_R_CREATE_ROOM {
        ::std::default::Default::default()
    }

    // uint32 room_type = 1;


    pub fn get_room_type(&self) -> u32 {
        self.room_type
    }
    pub fn clear_room_type(&mut self) {
        self.room_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_type(&mut self, v: u32) {
        self.room_type = v;
    }

    // .protos.PlayerBattlePt pbp = 2;


    pub fn get_pbp(&self) -> &PlayerBattlePt {
        self.pbp.as_ref().unwrap_or_else(|| PlayerBattlePt::default_instance())
    }
    pub fn clear_pbp(&mut self) {
        self.pbp.clear();
    }

    pub fn has_pbp(&self) -> bool {
        self.pbp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pbp(&mut self, v: PlayerBattlePt) {
        self.pbp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pbp(&mut self) -> &mut PlayerBattlePt {
        if self.pbp.is_none() {
            self.pbp.set_default();
        }
        self.pbp.as_mut().unwrap()
    }

    // Take field
    pub fn take_pbp(&mut self) -> PlayerBattlePt {
        self.pbp.take().unwrap_or_else(|| PlayerBattlePt::new())
    }
}

impl ::protobuf::Message for G_R_CREATE_ROOM {
    fn is_initialized(&self) -> bool {
        for v in &self.pbp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_type = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pbp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pbp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_type != 0 {
            os.write_uint32(1, self.room_type)?;
        }
        if let Some(ref v) = self.pbp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> G_R_CREATE_ROOM {
        G_R_CREATE_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "room_type",
                    |m: &G_R_CREATE_ROOM| { &m.room_type },
                    |m: &mut G_R_CREATE_ROOM| { &mut m.room_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerBattlePt>>(
                    "pbp",
                    |m: &G_R_CREATE_ROOM| { &m.pbp },
                    |m: &mut G_R_CREATE_ROOM| { &mut m.pbp },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<G_R_CREATE_ROOM>(
                    "G_R_CREATE_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static G_R_CREATE_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<G_R_CREATE_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(G_R_CREATE_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for G_R_CREATE_ROOM {
    fn clear(&mut self) {
        self.room_type = 0;
        self.pbp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for G_R_CREATE_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for G_R_CREATE_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct G_R_JOIN_ROOM {
    // message fields
    pub room_id: u32,
    pub pbp: ::protobuf::SingularPtrField<PlayerBattlePt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a G_R_JOIN_ROOM {
    fn default() -> &'a G_R_JOIN_ROOM {
        <G_R_JOIN_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl G_R_JOIN_ROOM {
    pub fn new() -> G_R_JOIN_ROOM {
        ::std::default::Default::default()
    }

    // uint32 room_id = 1;


    pub fn get_room_id(&self) -> u32 {
        self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: u32) {
        self.room_id = v;
    }

    // .protos.PlayerBattlePt pbp = 2;


    pub fn get_pbp(&self) -> &PlayerBattlePt {
        self.pbp.as_ref().unwrap_or_else(|| PlayerBattlePt::default_instance())
    }
    pub fn clear_pbp(&mut self) {
        self.pbp.clear();
    }

    pub fn has_pbp(&self) -> bool {
        self.pbp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pbp(&mut self, v: PlayerBattlePt) {
        self.pbp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pbp(&mut self) -> &mut PlayerBattlePt {
        if self.pbp.is_none() {
            self.pbp.set_default();
        }
        self.pbp.as_mut().unwrap()
    }

    // Take field
    pub fn take_pbp(&mut self) -> PlayerBattlePt {
        self.pbp.take().unwrap_or_else(|| PlayerBattlePt::new())
    }
}

impl ::protobuf::Message for G_R_JOIN_ROOM {
    fn is_initialized(&self) -> bool {
        for v in &self.pbp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.room_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pbp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.room_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.room_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pbp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.room_id != 0 {
            os.write_uint32(1, self.room_id)?;
        }
        if let Some(ref v) = self.pbp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> G_R_JOIN_ROOM {
        G_R_JOIN_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "room_id",
                    |m: &G_R_JOIN_ROOM| { &m.room_id },
                    |m: &mut G_R_JOIN_ROOM| { &mut m.room_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerBattlePt>>(
                    "pbp",
                    |m: &G_R_JOIN_ROOM| { &m.pbp },
                    |m: &mut G_R_JOIN_ROOM| { &mut m.pbp },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<G_R_JOIN_ROOM>(
                    "G_R_JOIN_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static G_R_JOIN_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<G_R_JOIN_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(G_R_JOIN_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for G_R_JOIN_ROOM {
    fn clear(&mut self) {
        self.room_id = 0;
        self.pbp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for G_R_JOIN_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for G_R_JOIN_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct G_R_SEARCH_ROOM {
    // message fields
    pub battle_type: u32,
    pub pbp: ::protobuf::SingularPtrField<PlayerBattlePt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a G_R_SEARCH_ROOM {
    fn default() -> &'a G_R_SEARCH_ROOM {
        <G_R_SEARCH_ROOM as ::protobuf::Message>::default_instance()
    }
}

impl G_R_SEARCH_ROOM {
    pub fn new() -> G_R_SEARCH_ROOM {
        ::std::default::Default::default()
    }

    // uint32 battle_type = 1;


    pub fn get_battle_type(&self) -> u32 {
        self.battle_type
    }
    pub fn clear_battle_type(&mut self) {
        self.battle_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_battle_type(&mut self, v: u32) {
        self.battle_type = v;
    }

    // .protos.PlayerBattlePt pbp = 2;


    pub fn get_pbp(&self) -> &PlayerBattlePt {
        self.pbp.as_ref().unwrap_or_else(|| PlayerBattlePt::default_instance())
    }
    pub fn clear_pbp(&mut self) {
        self.pbp.clear();
    }

    pub fn has_pbp(&self) -> bool {
        self.pbp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pbp(&mut self, v: PlayerBattlePt) {
        self.pbp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pbp(&mut self) -> &mut PlayerBattlePt {
        if self.pbp.is_none() {
            self.pbp.set_default();
        }
        self.pbp.as_mut().unwrap()
    }

    // Take field
    pub fn take_pbp(&mut self) -> PlayerBattlePt {
        self.pbp.take().unwrap_or_else(|| PlayerBattlePt::new())
    }
}

impl ::protobuf::Message for G_R_SEARCH_ROOM {
    fn is_initialized(&self) -> bool {
        for v in &self.pbp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.battle_type = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pbp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.battle_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.battle_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pbp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.battle_type != 0 {
            os.write_uint32(1, self.battle_type)?;
        }
        if let Some(ref v) = self.pbp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> G_R_SEARCH_ROOM {
        G_R_SEARCH_ROOM::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "battle_type",
                    |m: &G_R_SEARCH_ROOM| { &m.battle_type },
                    |m: &mut G_R_SEARCH_ROOM| { &mut m.battle_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlayerBattlePt>>(
                    "pbp",
                    |m: &G_R_SEARCH_ROOM| { &m.pbp },
                    |m: &mut G_R_SEARCH_ROOM| { &mut m.pbp },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<G_R_SEARCH_ROOM>(
                    "G_R_SEARCH_ROOM",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static G_R_SEARCH_ROOM {
        static mut instance: ::protobuf::lazy::Lazy<G_R_SEARCH_ROOM> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(G_R_SEARCH_ROOM::new)
        }
    }
}

impl ::protobuf::Clear for G_R_SEARCH_ROOM {
    fn clear(&mut self) {
        self.battle_type = 0;
        self.pbp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for G_R_SEARCH_ROOM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for G_R_SEARCH_ROOM {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct R_G_SUMMARY {
    // message fields
    pub winners: ::protobuf::RepeatedField<WinnerPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a R_G_SUMMARY {
    fn default() -> &'a R_G_SUMMARY {
        <R_G_SUMMARY as ::protobuf::Message>::default_instance()
    }
}

impl R_G_SUMMARY {
    pub fn new() -> R_G_SUMMARY {
        ::std::default::Default::default()
    }

    // repeated .protos.WinnerPt winners = 1;


    pub fn get_winners(&self) -> &[WinnerPt] {
        &self.winners
    }
    pub fn clear_winners(&mut self) {
        self.winners.clear();
    }

    // Param is passed by value, moved
    pub fn set_winners(&mut self, v: ::protobuf::RepeatedField<WinnerPt>) {
        self.winners = v;
    }

    // Mutable pointer to the field.
    pub fn mut_winners(&mut self) -> &mut ::protobuf::RepeatedField<WinnerPt> {
        &mut self.winners
    }

    // Take field
    pub fn take_winners(&mut self) -> ::protobuf::RepeatedField<WinnerPt> {
        ::std::mem::replace(&mut self.winners, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for R_G_SUMMARY {
    fn is_initialized(&self) -> bool {
        for v in &self.winners {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.winners)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.winners {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.winners {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> R_G_SUMMARY {
        R_G_SUMMARY::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WinnerPt>>(
                    "winners",
                    |m: &R_G_SUMMARY| { &m.winners },
                    |m: &mut R_G_SUMMARY| { &mut m.winners },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<R_G_SUMMARY>(
                    "R_G_SUMMARY",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static R_G_SUMMARY {
        static mut instance: ::protobuf::lazy::Lazy<R_G_SUMMARY> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(R_G_SUMMARY::new)
        }
    }
}

impl ::protobuf::Clear for R_G_SUMMARY {
    fn clear(&mut self) {
        self.winners.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for R_G_SUMMARY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for R_G_SUMMARY {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WinnerPt {
    // message fields
    pub user_id: u32,
    pub cter_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WinnerPt {
    fn default() -> &'a WinnerPt {
        <WinnerPt as ::protobuf::Message>::default_instance()
    }
}

impl WinnerPt {
    pub fn new() -> WinnerPt {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 cter_id = 2;


    pub fn get_cter_id(&self) -> u32 {
        self.cter_id
    }
    pub fn clear_cter_id(&mut self) {
        self.cter_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cter_id(&mut self, v: u32) {
        self.cter_id = v;
    }
}

impl ::protobuf::Message for WinnerPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cter_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cter_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.cter_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if self.cter_id != 0 {
            os.write_uint32(2, self.cter_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WinnerPt {
        WinnerPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &WinnerPt| { &m.user_id },
                    |m: &mut WinnerPt| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cter_id",
                    |m: &WinnerPt| { &m.cter_id },
                    |m: &mut WinnerPt| { &mut m.cter_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WinnerPt>(
                    "WinnerPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WinnerPt {
        static mut instance: ::protobuf::lazy::Lazy<WinnerPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WinnerPt::new)
        }
    }
}

impl ::protobuf::Clear for WinnerPt {
    fn clear(&mut self) {
        self.user_id = 0;
        self.cter_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WinnerPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WinnerPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerBattlePt {
    // message fields
    pub user_id: u32,
    pub nick_name: ::std::string::String,
    pub cters: ::protobuf::RepeatedField<super::base::CharacterPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerBattlePt {
    fn default() -> &'a PlayerBattlePt {
        <PlayerBattlePt as ::protobuf::Message>::default_instance()
    }
}

impl PlayerBattlePt {
    pub fn new() -> PlayerBattlePt {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // string nick_name = 2;


    pub fn get_nick_name(&self) -> &str {
        &self.nick_name
    }
    pub fn clear_nick_name(&mut self) {
        self.nick_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_nick_name(&mut self, v: ::std::string::String) {
        self.nick_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nick_name(&mut self) -> &mut ::std::string::String {
        &mut self.nick_name
    }

    // Take field
    pub fn take_nick_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nick_name, ::std::string::String::new())
    }

    // repeated .protos.CharacterPt cters = 3;


    pub fn get_cters(&self) -> &[super::base::CharacterPt] {
        &self.cters
    }
    pub fn clear_cters(&mut self) {
        self.cters.clear();
    }

    // Param is passed by value, moved
    pub fn set_cters(&mut self, v: ::protobuf::RepeatedField<super::base::CharacterPt>) {
        self.cters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cters(&mut self) -> &mut ::protobuf::RepeatedField<super::base::CharacterPt> {
        &mut self.cters
    }

    // Take field
    pub fn take_cters(&mut self) -> ::protobuf::RepeatedField<super::base::CharacterPt> {
        ::std::mem::replace(&mut self.cters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PlayerBattlePt {
    fn is_initialized(&self) -> bool {
        for v in &self.cters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nick_name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.nick_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nick_name);
        }
        for value in &self.cters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if !self.nick_name.is_empty() {
            os.write_string(2, &self.nick_name)?;
        }
        for v in &self.cters {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerBattlePt {
        PlayerBattlePt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &PlayerBattlePt| { &m.user_id },
                    |m: &mut PlayerBattlePt| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nick_name",
                    |m: &PlayerBattlePt| { &m.nick_name },
                    |m: &mut PlayerBattlePt| { &mut m.nick_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::CharacterPt>>(
                    "cters",
                    |m: &PlayerBattlePt| { &m.cters },
                    |m: &mut PlayerBattlePt| { &mut m.cters },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerBattlePt>(
                    "PlayerBattlePt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PlayerBattlePt {
        static mut instance: ::protobuf::lazy::Lazy<PlayerBattlePt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PlayerBattlePt::new)
        }
    }
}

impl ::protobuf::Clear for PlayerBattlePt {
    fn clear(&mut self) {
        self.user_id = 0;
        self.nick_name.clear();
        self.cters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerBattlePt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerBattlePt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15server_protocol.proto\x12\x06protos\x1a\nbase.proto\"X\n\x0fG_R_CR\
    EATE_ROOM\x12\x1b\n\troom_type\x18\x01\x20\x01(\rR\x08roomType\x12(\n\
    \x03pbp\x18\x02\x20\x01(\x0b2\x16.protos.PlayerBattlePtR\x03pbp\"R\n\rG_\
    R_JOIN_ROOM\x12\x17\n\x07room_id\x18\x01\x20\x01(\rR\x06roomId\x12(\n\
    \x03pbp\x18\x02\x20\x01(\x0b2\x16.protos.PlayerBattlePtR\x03pbp\"\\\n\
    \x0fG_R_SEARCH_ROOM\x12\x1f\n\x0bbattle_type\x18\x01\x20\x01(\rR\nbattle\
    Type\x12(\n\x03pbp\x18\x02\x20\x01(\x0b2\x16.protos.PlayerBattlePtR\x03p\
    bp\"9\n\x0bR_G_SUMMARY\x12*\n\x07winners\x18\x01\x20\x03(\x0b2\x10.proto\
    s.WinnerPtR\x07winners\"<\n\x08WinnerPt\x12\x17\n\x07user_id\x18\x01\x20\
    \x01(\rR\x06userId\x12\x17\n\x07cter_id\x18\x02\x20\x01(\rR\x06cterId\"q\
    \n\x0ePlayerBattlePt\x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\
    \x12\x1b\n\tnick_name\x18\x02\x20\x01(\tR\x08nickName\x12)\n\x05cters\
    \x18\x03\x20\x03(\x0b2\x13.protos.CharacterPtR\x05ctersb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
