// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protocol.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct C_USER_LOGIN {
    // message fields
    pub userId: u32,
    pub avatar: ::std::string::String,
    pub nickName: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_USER_LOGIN {
    fn default() -> &'a C_USER_LOGIN {
        <C_USER_LOGIN as ::protobuf::Message>::default_instance()
    }
}

impl C_USER_LOGIN {
    pub fn new() -> C_USER_LOGIN {
        ::std::default::Default::default()
    }

    // uint32 userId = 1;


    pub fn get_userId(&self) -> u32 {
        self.userId
    }
    pub fn clear_userId(&mut self) {
        self.userId = 0;
    }

    // Param is passed by value, moved
    pub fn set_userId(&mut self, v: u32) {
        self.userId = v;
    }

    // string avatar = 2;


    pub fn get_avatar(&self) -> &str {
        &self.avatar
    }
    pub fn clear_avatar(&mut self) {
        self.avatar.clear();
    }

    // Param is passed by value, moved
    pub fn set_avatar(&mut self, v: ::std::string::String) {
        self.avatar = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_avatar(&mut self) -> &mut ::std::string::String {
        &mut self.avatar
    }

    // Take field
    pub fn take_avatar(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.avatar, ::std::string::String::new())
    }

    // string nickName = 3;


    pub fn get_nickName(&self) -> &str {
        &self.nickName
    }
    pub fn clear_nickName(&mut self) {
        self.nickName.clear();
    }

    // Param is passed by value, moved
    pub fn set_nickName(&mut self, v: ::std::string::String) {
        self.nickName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nickName(&mut self) -> &mut ::std::string::String {
        &mut self.nickName
    }

    // Take field
    pub fn take_nickName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nickName, ::std::string::String::new())
    }
}

impl ::protobuf::Message for C_USER_LOGIN {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.userId = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.avatar)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nickName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.userId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.userId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.avatar.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.avatar);
        }
        if !self.nickName.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.nickName);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.userId != 0 {
            os.write_uint32(1, self.userId)?;
        }
        if !self.avatar.is_empty() {
            os.write_string(2, &self.avatar)?;
        }
        if !self.nickName.is_empty() {
            os.write_string(3, &self.nickName)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_USER_LOGIN {
        C_USER_LOGIN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "userId",
                    |m: &C_USER_LOGIN| { &m.userId },
                    |m: &mut C_USER_LOGIN| { &mut m.userId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "avatar",
                    |m: &C_USER_LOGIN| { &m.avatar },
                    |m: &mut C_USER_LOGIN| { &mut m.avatar },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nickName",
                    |m: &C_USER_LOGIN| { &m.nickName },
                    |m: &mut C_USER_LOGIN| { &mut m.nickName },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_USER_LOGIN>(
                    "C_USER_LOGIN",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_USER_LOGIN {
        static mut instance: ::protobuf::lazy::Lazy<C_USER_LOGIN> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_USER_LOGIN::new)
        }
    }
}

impl ::protobuf::Clear for C_USER_LOGIN {
    fn clear(&mut self) {
        self.userId = 0;
        self.avatar.clear();
        self.nickName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_USER_LOGIN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_USER_LOGIN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_USER_LOGIN {
    // message fields
    pub isSucc: bool,
    pub errMess: ::std::string::String,
    pub syncTime: u32,
    pub lastLoginTime: u32,
    pub lastLogOffTime: u32,
    pub playerPt: ::protobuf::SingularPtrField<super::base::PlayerPt>,
    pub resp: ::protobuf::RepeatedField<super::base::ResourcesPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_USER_LOGIN {
    fn default() -> &'a S_USER_LOGIN {
        <S_USER_LOGIN as ::protobuf::Message>::default_instance()
    }
}

impl S_USER_LOGIN {
    pub fn new() -> S_USER_LOGIN {
        ::std::default::Default::default()
    }

    // bool isSucc = 1;


    pub fn get_isSucc(&self) -> bool {
        self.isSucc
    }
    pub fn clear_isSucc(&mut self) {
        self.isSucc = false;
    }

    // Param is passed by value, moved
    pub fn set_isSucc(&mut self, v: bool) {
        self.isSucc = v;
    }

    // string errMess = 2;


    pub fn get_errMess(&self) -> &str {
        &self.errMess
    }
    pub fn clear_errMess(&mut self) {
        self.errMess.clear();
    }

    // Param is passed by value, moved
    pub fn set_errMess(&mut self, v: ::std::string::String) {
        self.errMess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errMess(&mut self) -> &mut ::std::string::String {
        &mut self.errMess
    }

    // Take field
    pub fn take_errMess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.errMess, ::std::string::String::new())
    }

    // uint32 syncTime = 3;


    pub fn get_syncTime(&self) -> u32 {
        self.syncTime
    }
    pub fn clear_syncTime(&mut self) {
        self.syncTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_syncTime(&mut self, v: u32) {
        self.syncTime = v;
    }

    // uint32 lastLoginTime = 4;


    pub fn get_lastLoginTime(&self) -> u32 {
        self.lastLoginTime
    }
    pub fn clear_lastLoginTime(&mut self) {
        self.lastLoginTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_lastLoginTime(&mut self, v: u32) {
        self.lastLoginTime = v;
    }

    // uint32 lastLogOffTime = 5;


    pub fn get_lastLogOffTime(&self) -> u32 {
        self.lastLogOffTime
    }
    pub fn clear_lastLogOffTime(&mut self) {
        self.lastLogOffTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_lastLogOffTime(&mut self, v: u32) {
        self.lastLogOffTime = v;
    }

    // .protos.PlayerPt playerPt = 6;


    pub fn get_playerPt(&self) -> &super::base::PlayerPt {
        self.playerPt.as_ref().unwrap_or_else(|| super::base::PlayerPt::default_instance())
    }
    pub fn clear_playerPt(&mut self) {
        self.playerPt.clear();
    }

    pub fn has_playerPt(&self) -> bool {
        self.playerPt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_playerPt(&mut self, v: super::base::PlayerPt) {
        self.playerPt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_playerPt(&mut self) -> &mut super::base::PlayerPt {
        if self.playerPt.is_none() {
            self.playerPt.set_default();
        }
        self.playerPt.as_mut().unwrap()
    }

    // Take field
    pub fn take_playerPt(&mut self) -> super::base::PlayerPt {
        self.playerPt.take().unwrap_or_else(|| super::base::PlayerPt::new())
    }

    // repeated .protos.ResourcesPt resp = 7;


    pub fn get_resp(&self) -> &[super::base::ResourcesPt] {
        &self.resp
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: ::protobuf::RepeatedField<super::base::ResourcesPt>) {
        self.resp = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resp(&mut self) -> &mut ::protobuf::RepeatedField<super::base::ResourcesPt> {
        &mut self.resp
    }

    // Take field
    pub fn take_resp(&mut self) -> ::protobuf::RepeatedField<super::base::ResourcesPt> {
        ::std::mem::replace(&mut self.resp, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for S_USER_LOGIN {
    fn is_initialized(&self) -> bool {
        for v in &self.playerPt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isSucc = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.errMess)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.syncTime = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lastLoginTime = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lastLogOffTime = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.playerPt)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isSucc != false {
            my_size += 2;
        }
        if !self.errMess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.errMess);
        }
        if self.syncTime != 0 {
            my_size += ::protobuf::rt::value_size(3, self.syncTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lastLoginTime != 0 {
            my_size += ::protobuf::rt::value_size(4, self.lastLoginTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lastLogOffTime != 0 {
            my_size += ::protobuf::rt::value_size(5, self.lastLogOffTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.playerPt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.resp {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isSucc != false {
            os.write_bool(1, self.isSucc)?;
        }
        if !self.errMess.is_empty() {
            os.write_string(2, &self.errMess)?;
        }
        if self.syncTime != 0 {
            os.write_uint32(3, self.syncTime)?;
        }
        if self.lastLoginTime != 0 {
            os.write_uint32(4, self.lastLoginTime)?;
        }
        if self.lastLogOffTime != 0 {
            os.write_uint32(5, self.lastLogOffTime)?;
        }
        if let Some(ref v) = self.playerPt.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.resp {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_USER_LOGIN {
        S_USER_LOGIN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isSucc",
                    |m: &S_USER_LOGIN| { &m.isSucc },
                    |m: &mut S_USER_LOGIN| { &mut m.isSucc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "errMess",
                    |m: &S_USER_LOGIN| { &m.errMess },
                    |m: &mut S_USER_LOGIN| { &mut m.errMess },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "syncTime",
                    |m: &S_USER_LOGIN| { &m.syncTime },
                    |m: &mut S_USER_LOGIN| { &mut m.syncTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "lastLoginTime",
                    |m: &S_USER_LOGIN| { &m.lastLoginTime },
                    |m: &mut S_USER_LOGIN| { &mut m.lastLoginTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "lastLogOffTime",
                    |m: &S_USER_LOGIN| { &m.lastLogOffTime },
                    |m: &mut S_USER_LOGIN| { &mut m.lastLogOffTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::PlayerPt>>(
                    "playerPt",
                    |m: &S_USER_LOGIN| { &m.playerPt },
                    |m: &mut S_USER_LOGIN| { &mut m.playerPt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::ResourcesPt>>(
                    "resp",
                    |m: &S_USER_LOGIN| { &m.resp },
                    |m: &mut S_USER_LOGIN| { &mut m.resp },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_USER_LOGIN>(
                    "S_USER_LOGIN",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_USER_LOGIN {
        static mut instance: ::protobuf::lazy::Lazy<S_USER_LOGIN> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_USER_LOGIN::new)
        }
    }
}

impl ::protobuf::Clear for S_USER_LOGIN {
    fn clear(&mut self) {
        self.isSucc = false;
        self.errMess.clear();
        self.syncTime = 0;
        self.lastLoginTime = 0;
        self.lastLogOffTime = 0;
        self.playerPt.clear();
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_USER_LOGIN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_USER_LOGIN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HEART_BEAT {
    // message fields
    pub sysTime: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HEART_BEAT {
    fn default() -> &'a HEART_BEAT {
        <HEART_BEAT as ::protobuf::Message>::default_instance()
    }
}

impl HEART_BEAT {
    pub fn new() -> HEART_BEAT {
        ::std::default::Default::default()
    }

    // uint32 sysTime = 1;


    pub fn get_sysTime(&self) -> u32 {
        self.sysTime
    }
    pub fn clear_sysTime(&mut self) {
        self.sysTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_sysTime(&mut self, v: u32) {
        self.sysTime = v;
    }
}

impl ::protobuf::Message for HEART_BEAT {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sysTime = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sysTime != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sysTime, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sysTime != 0 {
            os.write_uint32(1, self.sysTime)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HEART_BEAT {
        HEART_BEAT::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "sysTime",
                    |m: &HEART_BEAT| { &m.sysTime },
                    |m: &mut HEART_BEAT| { &mut m.sysTime },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<HEART_BEAT>(
                    "HEART_BEAT",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HEART_BEAT {
        static mut instance: ::protobuf::lazy::Lazy<HEART_BEAT> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(HEART_BEAT::new)
        }
    }
}

impl ::protobuf::Clear for HEART_BEAT {
    fn clear(&mut self) {
        self.sysTime = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HEART_BEAT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HEART_BEAT {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_SYNC_DATA {
    // message fields
    pub playerPt: ::protobuf::SingularPtrField<super::base::PlayerPt>,
    pub resp: ::protobuf::RepeatedField<super::base::ResourcesPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_SYNC_DATA {
    fn default() -> &'a C_SYNC_DATA {
        <C_SYNC_DATA as ::protobuf::Message>::default_instance()
    }
}

impl C_SYNC_DATA {
    pub fn new() -> C_SYNC_DATA {
        ::std::default::Default::default()
    }

    // .protos.PlayerPt playerPt = 1;


    pub fn get_playerPt(&self) -> &super::base::PlayerPt {
        self.playerPt.as_ref().unwrap_or_else(|| super::base::PlayerPt::default_instance())
    }
    pub fn clear_playerPt(&mut self) {
        self.playerPt.clear();
    }

    pub fn has_playerPt(&self) -> bool {
        self.playerPt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_playerPt(&mut self, v: super::base::PlayerPt) {
        self.playerPt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_playerPt(&mut self) -> &mut super::base::PlayerPt {
        if self.playerPt.is_none() {
            self.playerPt.set_default();
        }
        self.playerPt.as_mut().unwrap()
    }

    // Take field
    pub fn take_playerPt(&mut self) -> super::base::PlayerPt {
        self.playerPt.take().unwrap_or_else(|| super::base::PlayerPt::new())
    }

    // repeated .protos.ResourcesPt resp = 2;


    pub fn get_resp(&self) -> &[super::base::ResourcesPt] {
        &self.resp
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: ::protobuf::RepeatedField<super::base::ResourcesPt>) {
        self.resp = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resp(&mut self) -> &mut ::protobuf::RepeatedField<super::base::ResourcesPt> {
        &mut self.resp
    }

    // Take field
    pub fn take_resp(&mut self) -> ::protobuf::RepeatedField<super::base::ResourcesPt> {
        ::std::mem::replace(&mut self.resp, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for C_SYNC_DATA {
    fn is_initialized(&self) -> bool {
        for v in &self.playerPt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.playerPt)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.playerPt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.resp {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.playerPt.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.resp {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_SYNC_DATA {
        C_SYNC_DATA::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::PlayerPt>>(
                    "playerPt",
                    |m: &C_SYNC_DATA| { &m.playerPt },
                    |m: &mut C_SYNC_DATA| { &mut m.playerPt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::ResourcesPt>>(
                    "resp",
                    |m: &C_SYNC_DATA| { &m.resp },
                    |m: &mut C_SYNC_DATA| { &mut m.resp },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_SYNC_DATA>(
                    "C_SYNC_DATA",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_SYNC_DATA {
        static mut instance: ::protobuf::lazy::Lazy<C_SYNC_DATA> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_SYNC_DATA::new)
        }
    }
}

impl ::protobuf::Clear for C_SYNC_DATA {
    fn clear(&mut self) {
        self.playerPt.clear();
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_SYNC_DATA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_SYNC_DATA {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_SYNC_DATA {
    // message fields
    pub isSucc: bool,
    pub errMess: ::std::string::String,
    pub syncTime: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_SYNC_DATA {
    fn default() -> &'a S_SYNC_DATA {
        <S_SYNC_DATA as ::protobuf::Message>::default_instance()
    }
}

impl S_SYNC_DATA {
    pub fn new() -> S_SYNC_DATA {
        ::std::default::Default::default()
    }

    // bool isSucc = 1;


    pub fn get_isSucc(&self) -> bool {
        self.isSucc
    }
    pub fn clear_isSucc(&mut self) {
        self.isSucc = false;
    }

    // Param is passed by value, moved
    pub fn set_isSucc(&mut self, v: bool) {
        self.isSucc = v;
    }

    // string errMess = 2;


    pub fn get_errMess(&self) -> &str {
        &self.errMess
    }
    pub fn clear_errMess(&mut self) {
        self.errMess.clear();
    }

    // Param is passed by value, moved
    pub fn set_errMess(&mut self, v: ::std::string::String) {
        self.errMess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errMess(&mut self) -> &mut ::std::string::String {
        &mut self.errMess
    }

    // Take field
    pub fn take_errMess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.errMess, ::std::string::String::new())
    }

    // uint32 syncTime = 3;


    pub fn get_syncTime(&self) -> u32 {
        self.syncTime
    }
    pub fn clear_syncTime(&mut self) {
        self.syncTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_syncTime(&mut self, v: u32) {
        self.syncTime = v;
    }
}

impl ::protobuf::Message for S_SYNC_DATA {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isSucc = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.errMess)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.syncTime = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isSucc != false {
            my_size += 2;
        }
        if !self.errMess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.errMess);
        }
        if self.syncTime != 0 {
            my_size += ::protobuf::rt::value_size(3, self.syncTime, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isSucc != false {
            os.write_bool(1, self.isSucc)?;
        }
        if !self.errMess.is_empty() {
            os.write_string(2, &self.errMess)?;
        }
        if self.syncTime != 0 {
            os.write_uint32(3, self.syncTime)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_SYNC_DATA {
        S_SYNC_DATA::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isSucc",
                    |m: &S_SYNC_DATA| { &m.isSucc },
                    |m: &mut S_SYNC_DATA| { &mut m.isSucc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "errMess",
                    |m: &S_SYNC_DATA| { &m.errMess },
                    |m: &mut S_SYNC_DATA| { &mut m.errMess },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "syncTime",
                    |m: &S_SYNC_DATA| { &m.syncTime },
                    |m: &mut S_SYNC_DATA| { &mut m.syncTime },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_SYNC_DATA>(
                    "S_SYNC_DATA",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_SYNC_DATA {
        static mut instance: ::protobuf::lazy::Lazy<S_SYNC_DATA> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_SYNC_DATA::new)
        }
    }
}

impl ::protobuf::Clear for S_SYNC_DATA {
    fn clear(&mut self) {
        self.isSucc = false;
        self.errMess.clear();
        self.syncTime = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_SYNC_DATA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_SYNC_DATA {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eprotocol.proto\x12\x06protos\x1a\nbase.proto\"Z\n\x0cC_USER_LOGIN\
    \x12\x16\n\x06userId\x18\x01\x20\x01(\rR\x06userId\x12\x16\n\x06avatar\
    \x18\x02\x20\x01(\tR\x06avatar\x12\x1a\n\x08nickName\x18\x03\x20\x01(\tR\
    \x08nickName\"\x81\x02\n\x0cS_USER_LOGIN\x12\x16\n\x06isSucc\x18\x01\x20\
    \x01(\x08R\x06isSucc\x12\x18\n\x07errMess\x18\x02\x20\x01(\tR\x07errMess\
    \x12\x1a\n\x08syncTime\x18\x03\x20\x01(\rR\x08syncTime\x12$\n\rlastLogin\
    Time\x18\x04\x20\x01(\rR\rlastLoginTime\x12&\n\x0elastLogOffTime\x18\x05\
    \x20\x01(\rR\x0elastLogOffTime\x12,\n\x08playerPt\x18\x06\x20\x01(\x0b2\
    \x10.protos.PlayerPtR\x08playerPt\x12'\n\x04resp\x18\x07\x20\x03(\x0b2\
    \x13.protos.ResourcesPtR\x04resp\"&\n\nHEART_BEAT\x12\x18\n\x07sysTime\
    \x18\x01\x20\x01(\rR\x07sysTime\"d\n\x0bC_SYNC_DATA\x12,\n\x08playerPt\
    \x18\x01\x20\x01(\x0b2\x10.protos.PlayerPtR\x08playerPt\x12'\n\x04resp\
    \x18\x02\x20\x03(\x0b2\x13.protos.ResourcesPtR\x04resp\"[\n\x0bS_SYNC_DA\
    TA\x12\x16\n\x06isSucc\x18\x01\x20\x01(\x08R\x06isSucc\x12\x18\n\x07errM\
    ess\x18\x02\x20\x01(\tR\x07errMess\x12\x1a\n\x08syncTime\x18\x03\x20\x01\
    (\rR\x08syncTimeb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
