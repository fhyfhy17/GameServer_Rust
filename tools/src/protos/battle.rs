// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `battle.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct C_OPEN {
    // message fields
    pub index: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_OPEN {
    fn default() -> &'a C_OPEN {
        <C_OPEN as ::protobuf::Message>::default_instance()
    }
}

impl C_OPEN {
    pub fn new() -> C_OPEN {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }
}

impl ::protobuf::Message for C_OPEN {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_OPEN {
        C_OPEN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &C_OPEN| { &m.index },
                    |m: &mut C_OPEN| { &mut m.index },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_OPEN>(
                    "C_OPEN",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_OPEN {
        static mut instance: ::protobuf::lazy::Lazy<C_OPEN> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_OPEN::new)
        }
    }
}

impl ::protobuf::Clear for C_OPEN {
    fn clear(&mut self) {
        self.index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_OPEN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_OPEN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_OPEN {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_OPEN {
    fn default() -> &'a S_OPEN {
        <S_OPEN as ::protobuf::Message>::default_instance()
    }
}

impl S_OPEN {
    pub fn new() -> S_OPEN {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_OPEN {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_OPEN {
        S_OPEN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_OPEN| { &m.is_succ },
                    |m: &mut S_OPEN| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_OPEN| { &m.err_mess },
                    |m: &mut S_OPEN| { &mut m.err_mess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_OPEN>(
                    "S_OPEN",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_OPEN {
        static mut instance: ::protobuf::lazy::Lazy<S_OPEN> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_OPEN::new)
        }
    }
}

impl ::protobuf::Clear for S_OPEN {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_OPEN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_OPEN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_OPEN_NOTICE {
    // message fields
    pub user_id: u32,
    pub index: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_OPEN_NOTICE {
    fn default() -> &'a S_OPEN_NOTICE {
        <S_OPEN_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_OPEN_NOTICE {
    pub fn new() -> S_OPEN_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 index = 2;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }
}

impl ::protobuf::Message for S_OPEN_NOTICE {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if self.index != 0 {
            os.write_uint32(2, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_OPEN_NOTICE {
        S_OPEN_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &S_OPEN_NOTICE| { &m.user_id },
                    |m: &mut S_OPEN_NOTICE| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &S_OPEN_NOTICE| { &m.index },
                    |m: &mut S_OPEN_NOTICE| { &mut m.index },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_OPEN_NOTICE>(
                    "S_OPEN_NOTICE",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_OPEN_NOTICE {
        static mut instance: ::protobuf::lazy::Lazy<S_OPEN_NOTICE> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_OPEN_NOTICE::new)
        }
    }
}

impl ::protobuf::Clear for S_OPEN_NOTICE {
    fn clear(&mut self) {
        self.user_id = 0;
        self.index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_OPEN_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_OPEN_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_SKIP_TURN {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_SKIP_TURN {
    fn default() -> &'a C_SKIP_TURN {
        <C_SKIP_TURN as ::protobuf::Message>::default_instance()
    }
}

impl C_SKIP_TURN {
    pub fn new() -> C_SKIP_TURN {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for C_SKIP_TURN {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_SKIP_TURN {
        C_SKIP_TURN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_SKIP_TURN>(
                    "C_SKIP_TURN",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_SKIP_TURN {
        static mut instance: ::protobuf::lazy::Lazy<C_SKIP_TURN> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_SKIP_TURN::new)
        }
    }
}

impl ::protobuf::Clear for C_SKIP_TURN {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_SKIP_TURN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_SKIP_TURN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_SKIP_TURN {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_SKIP_TURN {
    fn default() -> &'a S_SKIP_TURN {
        <S_SKIP_TURN as ::protobuf::Message>::default_instance()
    }
}

impl S_SKIP_TURN {
    pub fn new() -> S_SKIP_TURN {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_SKIP_TURN {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_SKIP_TURN {
        S_SKIP_TURN::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_SKIP_TURN| { &m.is_succ },
                    |m: &mut S_SKIP_TURN| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_SKIP_TURN| { &m.err_mess },
                    |m: &mut S_SKIP_TURN| { &mut m.err_mess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_SKIP_TURN>(
                    "S_SKIP_TURN",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_SKIP_TURN {
        static mut instance: ::protobuf::lazy::Lazy<S_SKIP_TURN> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_SKIP_TURN::new)
        }
    }
}

impl ::protobuf::Clear for S_SKIP_TURN {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_SKIP_TURN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_SKIP_TURN {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_SKIP_NOTICE {
    // message fields
    pub user_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_SKIP_NOTICE {
    fn default() -> &'a S_SKIP_NOTICE {
        <S_SKIP_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_SKIP_NOTICE {
    pub fn new() -> S_SKIP_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }
}

impl ::protobuf::Message for S_SKIP_NOTICE {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_SKIP_NOTICE {
        S_SKIP_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &S_SKIP_NOTICE| { &m.user_id },
                    |m: &mut S_SKIP_NOTICE| { &mut m.user_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_SKIP_NOTICE>(
                    "S_SKIP_NOTICE",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_SKIP_NOTICE {
        static mut instance: ::protobuf::lazy::Lazy<S_SKIP_NOTICE> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_SKIP_NOTICE::new)
        }
    }
}

impl ::protobuf::Clear for S_SKIP_NOTICE {
    fn clear(&mut self) {
        self.user_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_SKIP_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_SKIP_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct C_ACTION {
    // message fields
    pub action_type: u32,
    pub value: u32,
    pub target: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a C_ACTION {
    fn default() -> &'a C_ACTION {
        <C_ACTION as ::protobuf::Message>::default_instance()
    }
}

impl C_ACTION {
    pub fn new() -> C_ACTION {
        ::std::default::Default::default()
    }

    // uint32 action_type = 1;


    pub fn get_action_type(&self) -> u32 {
        self.action_type
    }
    pub fn clear_action_type(&mut self) {
        self.action_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_action_type(&mut self, v: u32) {
        self.action_type = v;
    }

    // uint32 value = 2;


    pub fn get_value(&self) -> u32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u32) {
        self.value = v;
    }

    // repeated uint32 target = 3;


    pub fn get_target(&self) -> &[u32] {
        &self.target
    }
    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::std::vec::Vec<u32>) {
        self.target = v;
    }

    // Mutable pointer to the field.
    pub fn mut_target(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.target, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for C_ACTION {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.action_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.value = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.target)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.action_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.action_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(2, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.target {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.action_type != 0 {
            os.write_uint32(1, self.action_type)?;
        }
        if self.value != 0 {
            os.write_uint32(2, self.value)?;
        }
        for v in &self.target {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> C_ACTION {
        C_ACTION::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "action_type",
                    |m: &C_ACTION| { &m.action_type },
                    |m: &mut C_ACTION| { &mut m.action_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "value",
                    |m: &C_ACTION| { &m.value },
                    |m: &mut C_ACTION| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "target",
                    |m: &C_ACTION| { &m.target },
                    |m: &mut C_ACTION| { &mut m.target },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<C_ACTION>(
                    "C_ACTION",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static C_ACTION {
        static mut instance: ::protobuf::lazy::Lazy<C_ACTION> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(C_ACTION::new)
        }
    }
}

impl ::protobuf::Clear for C_ACTION {
    fn clear(&mut self) {
        self.action_type = 0;
        self.value = 0;
        self.target.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for C_ACTION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C_ACTION {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_ACTION {
    // message fields
    pub is_succ: bool,
    pub err_mess: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_ACTION {
    fn default() -> &'a S_ACTION {
        <S_ACTION as ::protobuf::Message>::default_instance()
    }
}

impl S_ACTION {
    pub fn new() -> S_ACTION {
        ::std::default::Default::default()
    }

    // bool is_succ = 1;


    pub fn get_is_succ(&self) -> bool {
        self.is_succ
    }
    pub fn clear_is_succ(&mut self) {
        self.is_succ = false;
    }

    // Param is passed by value, moved
    pub fn set_is_succ(&mut self, v: bool) {
        self.is_succ = v;
    }

    // string err_mess = 2;


    pub fn get_err_mess(&self) -> &str {
        &self.err_mess
    }
    pub fn clear_err_mess(&mut self) {
        self.err_mess.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_mess(&mut self, v: ::std::string::String) {
        self.err_mess = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_mess(&mut self) -> &mut ::std::string::String {
        &mut self.err_mess
    }

    // Take field
    pub fn take_err_mess(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_mess, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S_ACTION {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_succ = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_mess)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_succ != false {
            my_size += 2;
        }
        if !self.err_mess.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_mess);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_succ != false {
            os.write_bool(1, self.is_succ)?;
        }
        if !self.err_mess.is_empty() {
            os.write_string(2, &self.err_mess)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_ACTION {
        S_ACTION::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_succ",
                    |m: &S_ACTION| { &m.is_succ },
                    |m: &mut S_ACTION| { &mut m.is_succ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "err_mess",
                    |m: &S_ACTION| { &m.err_mess },
                    |m: &mut S_ACTION| { &mut m.err_mess },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_ACTION>(
                    "S_ACTION",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_ACTION {
        static mut instance: ::protobuf::lazy::Lazy<S_ACTION> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_ACTION::new)
        }
    }
}

impl ::protobuf::Clear for S_ACTION {
    fn clear(&mut self) {
        self.is_succ = false;
        self.err_mess.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_ACTION {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_ACTION {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_ACTION_NOTICE {
    // message fields
    pub user_id: u32,
    pub field_type: u32,
    pub value: u32,
    pub targets: ::protobuf::RepeatedField<TargetPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_ACTION_NOTICE {
    fn default() -> &'a S_ACTION_NOTICE {
        <S_ACTION_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_ACTION_NOTICE {
    pub fn new() -> S_ACTION_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = v;
    }

    // uint32 type = 2;


    pub fn get_field_type(&self) -> u32 {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: u32) {
        self.field_type = v;
    }

    // uint32 value = 3;


    pub fn get_value(&self) -> u32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u32) {
        self.value = v;
    }

    // repeated .protos.TargetPt targets = 4;


    pub fn get_targets(&self) -> &[TargetPt] {
        &self.targets
    }
    pub fn clear_targets(&mut self) {
        self.targets.clear();
    }

    // Param is passed by value, moved
    pub fn set_targets(&mut self, v: ::protobuf::RepeatedField<TargetPt>) {
        self.targets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_targets(&mut self) -> &mut ::protobuf::RepeatedField<TargetPt> {
        &mut self.targets
    }

    // Take field
    pub fn take_targets(&mut self) -> ::protobuf::RepeatedField<TargetPt> {
        ::std::mem::replace(&mut self.targets, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for S_ACTION_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.targets {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_type = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.value = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.targets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.field_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(3, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.targets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if self.field_type != 0 {
            os.write_uint32(2, self.field_type)?;
        }
        if self.value != 0 {
            os.write_uint32(3, self.value)?;
        }
        for v in &self.targets {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_ACTION_NOTICE {
        S_ACTION_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &S_ACTION_NOTICE| { &m.user_id },
                    |m: &mut S_ACTION_NOTICE| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "type",
                    |m: &S_ACTION_NOTICE| { &m.field_type },
                    |m: &mut S_ACTION_NOTICE| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "value",
                    |m: &S_ACTION_NOTICE| { &m.value },
                    |m: &mut S_ACTION_NOTICE| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TargetPt>>(
                    "targets",
                    |m: &S_ACTION_NOTICE| { &m.targets },
                    |m: &mut S_ACTION_NOTICE| { &mut m.targets },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_ACTION_NOTICE>(
                    "S_ACTION_NOTICE",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_ACTION_NOTICE {
        static mut instance: ::protobuf::lazy::Lazy<S_ACTION_NOTICE> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_ACTION_NOTICE::new)
        }
    }
}

impl ::protobuf::Clear for S_ACTION_NOTICE {
    fn clear(&mut self) {
        self.user_id = 0;
        self.field_type = 0;
        self.value = 0;
        self.targets.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_ACTION_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_ACTION_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TargetPt {
    // message fields
    pub target_id: u32,
    pub value: u32,
    pub buffs: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TargetPt {
    fn default() -> &'a TargetPt {
        <TargetPt as ::protobuf::Message>::default_instance()
    }
}

impl TargetPt {
    pub fn new() -> TargetPt {
        ::std::default::Default::default()
    }

    // uint32 target_id = 1;


    pub fn get_target_id(&self) -> u32 {
        self.target_id
    }
    pub fn clear_target_id(&mut self) {
        self.target_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_id(&mut self, v: u32) {
        self.target_id = v;
    }

    // uint32 value = 2;


    pub fn get_value(&self) -> u32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u32) {
        self.value = v;
    }

    // repeated uint32 buffs = 3;


    pub fn get_buffs(&self) -> &[u32] {
        &self.buffs
    }
    pub fn clear_buffs(&mut self) {
        self.buffs.clear();
    }

    // Param is passed by value, moved
    pub fn set_buffs(&mut self, v: ::std::vec::Vec<u32>) {
        self.buffs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_buffs(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.buffs
    }

    // Take field
    pub fn take_buffs(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.buffs, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TargetPt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.target_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.value = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.buffs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.target_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.target_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(2, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.buffs {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.target_id != 0 {
            os.write_uint32(1, self.target_id)?;
        }
        if self.value != 0 {
            os.write_uint32(2, self.value)?;
        }
        for v in &self.buffs {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TargetPt {
        TargetPt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "target_id",
                    |m: &TargetPt| { &m.target_id },
                    |m: &mut TargetPt| { &mut m.target_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "value",
                    |m: &TargetPt| { &m.value },
                    |m: &mut TargetPt| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "buffs",
                    |m: &TargetPt| { &m.buffs },
                    |m: &mut TargetPt| { &mut m.buffs },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TargetPt>(
                    "TargetPt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TargetPt {
        static mut instance: ::protobuf::lazy::Lazy<TargetPt> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TargetPt::new)
        }
    }
}

impl ::protobuf::Clear for TargetPt {
    fn clear(&mut self) {
        self.target_id = 0;
        self.value = 0;
        self.buffs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TargetPt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TargetPt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_MAP_REFRESH_NOTICE {
    // message fields
    pub tile_map_id: u32,
    pub cells: ::std::vec::Vec<u32>,
    pub world_cell: ::protobuf::RepeatedField<super::base::WorldCellPt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_MAP_REFRESH_NOTICE {
    fn default() -> &'a S_MAP_REFRESH_NOTICE {
        <S_MAP_REFRESH_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_MAP_REFRESH_NOTICE {
    pub fn new() -> S_MAP_REFRESH_NOTICE {
        ::std::default::Default::default()
    }

    // uint32 tile_map_id = 2;


    pub fn get_tile_map_id(&self) -> u32 {
        self.tile_map_id
    }
    pub fn clear_tile_map_id(&mut self) {
        self.tile_map_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_tile_map_id(&mut self, v: u32) {
        self.tile_map_id = v;
    }

    // repeated uint32 cells = 3;


    pub fn get_cells(&self) -> &[u32] {
        &self.cells
    }
    pub fn clear_cells(&mut self) {
        self.cells.clear();
    }

    // Param is passed by value, moved
    pub fn set_cells(&mut self, v: ::std::vec::Vec<u32>) {
        self.cells = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cells(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.cells
    }

    // Take field
    pub fn take_cells(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.cells, ::std::vec::Vec::new())
    }

    // repeated .protos.WorldCellPt world_cell = 4;


    pub fn get_world_cell(&self) -> &[super::base::WorldCellPt] {
        &self.world_cell
    }
    pub fn clear_world_cell(&mut self) {
        self.world_cell.clear();
    }

    // Param is passed by value, moved
    pub fn set_world_cell(&mut self, v: ::protobuf::RepeatedField<super::base::WorldCellPt>) {
        self.world_cell = v;
    }

    // Mutable pointer to the field.
    pub fn mut_world_cell(&mut self) -> &mut ::protobuf::RepeatedField<super::base::WorldCellPt> {
        &mut self.world_cell
    }

    // Take field
    pub fn take_world_cell(&mut self) -> ::protobuf::RepeatedField<super::base::WorldCellPt> {
        ::std::mem::replace(&mut self.world_cell, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for S_MAP_REFRESH_NOTICE {
    fn is_initialized(&self) -> bool {
        for v in &self.world_cell {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tile_map_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.cells)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.world_cell)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tile_map_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.tile_map_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cells {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.world_cell {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tile_map_id != 0 {
            os.write_uint32(2, self.tile_map_id)?;
        }
        for v in &self.cells {
            os.write_uint32(3, *v)?;
        };
        for v in &self.world_cell {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_MAP_REFRESH_NOTICE {
        S_MAP_REFRESH_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "tile_map_id",
                    |m: &S_MAP_REFRESH_NOTICE| { &m.tile_map_id },
                    |m: &mut S_MAP_REFRESH_NOTICE| { &mut m.tile_map_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cells",
                    |m: &S_MAP_REFRESH_NOTICE| { &m.cells },
                    |m: &mut S_MAP_REFRESH_NOTICE| { &mut m.cells },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::WorldCellPt>>(
                    "world_cell",
                    |m: &S_MAP_REFRESH_NOTICE| { &m.world_cell },
                    |m: &mut S_MAP_REFRESH_NOTICE| { &mut m.world_cell },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_MAP_REFRESH_NOTICE>(
                    "S_MAP_REFRESH_NOTICE",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_MAP_REFRESH_NOTICE {
        static mut instance: ::protobuf::lazy::Lazy<S_MAP_REFRESH_NOTICE> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_MAP_REFRESH_NOTICE::new)
        }
    }
}

impl ::protobuf::Clear for S_MAP_REFRESH_NOTICE {
    fn clear(&mut self) {
        self.tile_map_id = 0;
        self.cells.clear();
        self.world_cell.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_MAP_REFRESH_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_MAP_REFRESH_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S_SETTLEMENT_NOTICE {
    // message fields
    pub user_id: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S_SETTLEMENT_NOTICE {
    fn default() -> &'a S_SETTLEMENT_NOTICE {
        <S_SETTLEMENT_NOTICE as ::protobuf::Message>::default_instance()
    }
}

impl S_SETTLEMENT_NOTICE {
    pub fn new() -> S_SETTLEMENT_NOTICE {
        ::std::default::Default::default()
    }

    // repeated uint32 user_id = 1;


    pub fn get_user_id(&self) -> &[u32] {
        &self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: ::std::vec::Vec<u32>) {
        self.user_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_id(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.user_id
    }

    // Take field
    pub fn take_user_id(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.user_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for S_SETTLEMENT_NOTICE {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.user_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.user_id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.user_id {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S_SETTLEMENT_NOTICE {
        S_SETTLEMENT_NOTICE::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "user_id",
                    |m: &S_SETTLEMENT_NOTICE| { &m.user_id },
                    |m: &mut S_SETTLEMENT_NOTICE| { &mut m.user_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<S_SETTLEMENT_NOTICE>(
                    "S_SETTLEMENT_NOTICE",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static S_SETTLEMENT_NOTICE {
        static mut instance: ::protobuf::lazy::Lazy<S_SETTLEMENT_NOTICE> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(S_SETTLEMENT_NOTICE::new)
        }
    }
}

impl ::protobuf::Clear for S_SETTLEMENT_NOTICE {
    fn clear(&mut self) {
        self.user_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for S_SETTLEMENT_NOTICE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S_SETTLEMENT_NOTICE {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cbattle.proto\x12\x06protos\x1a\nbase.proto\"\x1e\n\x06C_OPEN\x12\
    \x14\n\x05index\x18\x01\x20\x01(\rR\x05index\"<\n\x06S_OPEN\x12\x17\n\
    \x07is_succ\x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_mess\x18\
    \x02\x20\x01(\tR\x07errMess\">\n\rS_OPEN_NOTICE\x12\x17\n\x07user_id\x18\
    \x01\x20\x01(\rR\x06userId\x12\x14\n\x05index\x18\x02\x20\x01(\rR\x05ind\
    ex\"\r\n\x0bC_SKIP_TURN\"A\n\x0bS_SKIP_TURN\x12\x17\n\x07is_succ\x18\x01\
    \x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_mess\x18\x02\x20\x01(\tR\x07er\
    rMess\"(\n\rS_SKIP_NOTICE\x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06us\
    erId\"Y\n\x08C_ACTION\x12\x1f\n\x0baction_type\x18\x01\x20\x01(\rR\nacti\
    onType\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value\x12\x16\n\x06targ\
    et\x18\x03\x20\x03(\rR\x06target\">\n\x08S_ACTION\x12\x17\n\x07is_succ\
    \x18\x01\x20\x01(\x08R\x06isSucc\x12\x19\n\x08err_mess\x18\x02\x20\x01(\
    \tR\x07errMess\"\x80\x01\n\x0fS_ACTION_NOTICE\x12\x17\n\x07user_id\x18\
    \x01\x20\x01(\rR\x06userId\x12\x12\n\x04type\x18\x02\x20\x01(\rR\x04type\
    \x12\x14\n\x05value\x18\x03\x20\x01(\rR\x05value\x12*\n\x07targets\x18\
    \x04\x20\x03(\x0b2\x10.protos.TargetPtR\x07targets\"S\n\x08TargetPt\x12\
    \x1b\n\ttarget_id\x18\x01\x20\x01(\rR\x08targetId\x12\x14\n\x05value\x18\
    \x02\x20\x01(\rR\x05value\x12\x14\n\x05buffs\x18\x03\x20\x03(\rR\x05buff\
    s\"\x80\x01\n\x14S_MAP_REFRESH_NOTICE\x12\x1e\n\x0btile_map_id\x18\x02\
    \x20\x01(\rR\ttileMapId\x12\x14\n\x05cells\x18\x03\x20\x03(\rR\x05cells\
    \x122\n\nworld_cell\x18\x04\x20\x03(\x0b2\x13.protos.WorldCellPtR\tworld\
    Cell\".\n\x13S_SETTLEMENT_NOTICE\x12\x17\n\x07user_id\x18\x01\x20\x03(\r\
    R\x06userIdb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
