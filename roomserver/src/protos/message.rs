// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `message.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
//const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct MsgEnum {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgEnum {
    fn default() -> &'a MsgEnum {
        <MsgEnum as ::protobuf::Message>::default_instance()
    }
}

impl MsgEnum {
    pub fn new() -> MsgEnum {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgEnum {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgEnum {
        MsgEnum::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<MsgEnum>(
                    "MsgEnum",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MsgEnum {
        static mut instance: ::protobuf::lazy::Lazy<MsgEnum> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MsgEnum,
        };
        unsafe {
            instance.get(MsgEnum::new)
        }
    }
}

impl ::protobuf::Clear for MsgEnum {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgEnum {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgEnum {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MsgEnum_MsgCode {
    MSG_EMPTY = 0,
    LOG_OFF  = 101,
    HEART_BEAT = 5002,
    C_USER_LOGIN = 1002,
    S_USER_LOGIN = 5003,
    C_SYNC_DATA = 1004,
    S_SYNC_DATA = 5004,
    C_RANK = 1005,
    S_RANK = 5005,
    C_REWARD_DAY_RANK = 1006,
    S_REWARD_DAY_RANK = 5006,
}

impl ::protobuf::ProtobufEnum for MsgEnum_MsgCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MsgEnum_MsgCode> {
        match value {
            0 => ::std::option::Option::Some(MsgEnum_MsgCode::MSG_EMPTY),
            5002 => ::std::option::Option::Some(MsgEnum_MsgCode::HEART_BEAT),
            1002 => ::std::option::Option::Some(MsgEnum_MsgCode::C_USER_LOGIN),
            5003 => ::std::option::Option::Some(MsgEnum_MsgCode::S_USER_LOGIN),
            1004 => ::std::option::Option::Some(MsgEnum_MsgCode::C_SYNC_DATA),
            5004 => ::std::option::Option::Some(MsgEnum_MsgCode::S_SYNC_DATA),
            1005 => ::std::option::Option::Some(MsgEnum_MsgCode::C_RANK),
            5005 => ::std::option::Option::Some(MsgEnum_MsgCode::S_RANK),
            1006 => ::std::option::Option::Some(MsgEnum_MsgCode::C_REWARD_DAY_RANK),
            5006 => ::std::option::Option::Some(MsgEnum_MsgCode::S_REWARD_DAY_RANK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MsgEnum_MsgCode] = &[
            MsgEnum_MsgCode::MSG_EMPTY,
            MsgEnum_MsgCode::HEART_BEAT,
            MsgEnum_MsgCode::C_USER_LOGIN,
            MsgEnum_MsgCode::S_USER_LOGIN,
            MsgEnum_MsgCode::C_SYNC_DATA,
            MsgEnum_MsgCode::S_SYNC_DATA,
            MsgEnum_MsgCode::C_RANK,
            MsgEnum_MsgCode::S_RANK,
            MsgEnum_MsgCode::C_REWARD_DAY_RANK,
            MsgEnum_MsgCode::S_REWARD_DAY_RANK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MsgEnum_MsgCode", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MsgEnum_MsgCode {
}

impl ::std::default::Default for MsgEnum_MsgCode {
    fn default() -> Self {
        MsgEnum_MsgCode::MSG_EMPTY
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgEnum_MsgCode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\x12\x06protos\"\xc9\x01\n\x07MsgEnum\"\xbd\x01\n\x07Ms\
    gCode\x12\r\n\tMSG_EMPTY\x10\0\x12\x0f\n\nHEART_BEAT\x10\x8a'\x12\x11\n\
    \x0cC_USER_LOGIN\x10\xea\x07\x12\x11\n\x0cS_USER_LOGIN\x10\x8b'\x12\x10\
    \n\x0bC_SYNC_DATA\x10\xec\x07\x12\x10\n\x0bS_SYNC_DATA\x10\x8c'\x12\x0b\
    \n\x06C_RANK\x10\xed\x07\x12\x0b\n\x06S_RANK\x10\x8d'\x12\x16\n\x11C_REW\
    ARD_DAY_RANK\x10\xee\x07\x12\x16\n\x11S_REWARD_DAY_RANK\x10\x8e'b\x06pro\
    to3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
